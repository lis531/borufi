---
export let playerState = {
    isLooping: false,
    isShuffling: false,
    audioSource: "",
    currentPlaylist: NaN,
    openedPlaylist: NaN,
    currentSong: NaN
};
---

<div id="audioPlayer">
    <div id="songInfo">
        <h1 id="title"></h1>
        <h2 id="artist"></h2>
    </div>
    <div id="mainControls">
        <div id="songControls">
            <button id="random">
                <svg stroke="currentColor" fill="none" stroke-width="0" viewBox="0 0 15 15" height="32px" width="32px" xmlns="http://www.w3.org/2000/svg" data-darkreader-inline-stroke="" style="--darkreader-inline-stroke: currentColor;"><path fill-rule="evenodd" clip-rule="evenodd" d="M12.3536 1.14645C12.1583 0.951184 11.8417 0.951184 11.6464 1.14645C11.4512 1.34171 11.4512 1.65829 11.6464 1.85355L12.7929 3H12C10.7037 3 9.71111 3.58423 8.87248 4.38931C8.20065 5.03427 7.59349 5.85684 6.99461 6.6682C6.86287 6.84668 6.73154 7.02462 6.6 7.2C5.10874 9.18835 3.49037 11 0.5 11C0.223858 11 0 11.2239 0 11.5C0 11.7761 0.223858 12 0.5 12C4.00963 12 5.89126 9.81165 7.4 7.8C7.54367 7.60845 7.6832 7.41962 7.81996 7.23454L7.82005 7.23443L7.82006 7.23441C8.41674 6.42695 8.96069 5.69085 9.56502 5.11069C10.2889 4.41577 11.0463 4 12 4H12.7929L11.6464 5.14645C11.4512 5.34171 11.4512 5.65829 11.6464 5.85355C11.8417 6.04882 12.1583 6.04882 12.3536 5.85355L14.3536 3.85355C14.5488 3.65829 14.5488 3.34171 14.3536 3.14645L12.3536 1.14645ZM0.5 3C3.35278 3 5.12992 4.44588 6.50548 6.06746L6.3762 6.24266C6.2483 6.4161 6.12293 6.58609 6 6.75C5.96397 6.79804 5.92798 6.84581 5.892 6.89331C4.57348 5.29306 3.02637 4 0.5 4C0.223858 4 0 3.77614 0 3.5C0 3.22386 0.223858 3 0.5 3ZM8.87248 10.6107C8.37284 10.131 7.90897 9.55314 7.45767 8.95468C7.64688 8.71693 7.82704 8.48061 8 8.25L8.08987 8.12987C8.58412 8.79402 9.05288 9.39766 9.56502 9.88931C10.2889 10.5842 11.0463 11 12 11H12.7929L11.6464 9.85355C11.4512 9.65829 11.4512 9.34171 11.6464 9.14645C11.8417 8.95118 12.1583 8.95118 12.3536 9.14645L14.3536 11.1464C14.5488 11.3417 14.5488 11.6583 14.3536 11.8536L12.3536 13.8536C12.1583 14.0488 11.8417 14.0488 11.6464 13.8536C11.4512 13.6583 11.4512 13.3417 11.6464 13.1464L12.7929 12H12C10.7037 12 9.71111 11.4158 8.87248 10.6107Z" fill="currentColor" data-darkreader-inline-fill="" style="--darkreader-inline-fill: currentColor;"></path></svg>
            </button>
            <button id="playPrevious">
                <svg stroke="currentColor" fill="none" stroke-width="0" viewBox="0 0 15 15" height="32px" width="32px" xmlns="http://www.w3.org/2000/svg" data-darkreader-inline-stroke="" style="--darkreader-inline-stroke: currentColor;"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.94976 2.74989C1.94976 2.44613 2.196 2.19989 2.49976 2.19989C2.80351 2.19989 3.04976 2.44613 3.04976 2.74989V7.2825C3.0954 7.18802 3.17046 7.10851 3.26662 7.05776L12.2666 2.30776C12.4216 2.22596 12.6081 2.23127 12.7582 2.32176C12.9083 2.41225 13 2.57471 13 2.74995V12.25C13 12.4252 12.9083 12.5877 12.7582 12.6781C12.6081 12.7686 12.4216 12.7739 12.2666 12.6921L3.26662 7.94214C3.17046 7.89139 3.0954 7.81188 3.04976 7.7174V12.2499C3.04976 12.5536 2.80351 12.7999 2.49976 12.7999C2.196 12.7999 1.94976 12.5536 1.94976 12.2499V2.74989ZM4.57122 7.49995L12 11.4207V3.5792L4.57122 7.49995Z" fill="currentColor" data-darkreader-inline-fill="" style="--darkreader-inline-fill: currentColor;"></path></svg>
            </button>
            <button id="play">
                <svg viewBox="0 0 15 15" height="32px" width="32px"><path d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925"></path></svg>
                <svg viewBox="0 0 15 15" height="32px" width="32px"><path d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z"></path></svg>
            </button>            
            <button id="playNext">
                <svg stroke="currentColor" fill="none" stroke-width="0" viewBox="0 0 15 15" height="32px" width="32px" xmlns="http://www.w3.org/2000/svg" data-darkreader-inline-stroke="" style="--darkreader-inline-stroke: currentColor;"><path fill-rule="evenodd" clip-rule="evenodd" d="M13.0502 2.74989C13.0502 2.44613 12.804 2.19989 12.5002 2.19989C12.1965 2.19989 11.9502 2.44613 11.9502 2.74989V7.2825C11.9046 7.18802 11.8295 7.10851 11.7334 7.05776L2.73338 2.30776C2.5784 2.22596 2.3919 2.23127 2.24182 2.32176C2.09175 2.41225 2 2.57471 2 2.74995V12.25C2 12.4252 2.09175 12.5877 2.24182 12.6781C2.3919 12.7686 2.5784 12.7739 2.73338 12.6921L11.7334 7.94214C11.8295 7.89139 11.9046 7.81188 11.9502 7.7174V12.2499C11.9502 12.5536 12.1965 12.7999 12.5002 12.7999C12.804 12.7999 13.0502 12.5536 13.0502 12.2499V2.74989ZM3 11.4207V3.5792L10.4288 7.49995L3 11.4207Z" fill="currentColor" data-darkreader-inline-fill="" style="--darkreader-inline-fill: currentColor;"></path></svg>
            </button>
            <button id="loop">
                <svg stroke="currentColor" fill="none" stroke-width="0" viewBox="0 0 15 15" height="32px" width="32px" xmlns="http://www.w3.org/2000/svg" data-darkreader-inline-stroke="" style="--darkreader-inline-stroke: currentColor;"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.35355 1.85355C3.54882 1.65829 3.54882 1.34171 3.35355 1.14645C3.15829 0.951184 2.84171 0.951184 2.64645 1.14645L0.646447 3.14645C0.451184 3.34171 0.451184 3.65829 0.646447 3.85355L2.64645 5.85355C2.84171 6.04882 3.15829 6.04882 3.35355 5.85355C3.54882 5.65829 3.54882 5.34171 3.35355 5.14645L2.20711 4H9.5C11.433 4 13 5.567 13 7.5C13 7.77614 13.2239 8 13.5 8C13.7761 8 14 7.77614 14 7.5C14 5.01472 11.9853 3 9.5 3H2.20711L3.35355 1.85355ZM2 7.5C2 7.22386 1.77614 7 1.5 7C1.22386 7 1 7.22386 1 7.5C1 9.98528 3.01472 12 5.5 12H12.7929L11.6464 13.1464C11.4512 13.3417 11.4512 13.6583 11.6464 13.8536C11.8417 14.0488 12.1583 14.0488 12.3536 13.8536L14.3536 11.8536C14.5488 11.6583 14.5488 11.3417 14.3536 11.1464L12.3536 9.14645C12.1583 8.95118 11.8417 8.95118 11.6464 9.14645C11.4512 9.34171 11.4512 9.65829 11.6464 9.85355L12.7929 11H5.5C3.567 11 2 9.433 2 7.5Z" fill="currentColor" data-darkreader-inline-fill="" style="--darkreader-inline-fill: currentColor;"></path></svg>
            </button>
        </div>
        <div id="audioNavigation">
            <label id="current-time" class="time">0:00</label>
            <input type="range" id="seek-slider" min="0" max="0" value="0" disabled>
            <label id="duration" class="time">0:00</label>
        </div>
    </div>
    <div id="volumeControl">
        <!-- <span id="volume">50</span> -->
        <button id="mute">
            <svg id="highV" viewBox="0 0 16 16" height="32px" width="32px" fill="white"><path d="M11.536 14.01A8.473 8.473 0 0 0 14.026 8a8.473 8.473 0 0 0-2.49-6.01l-.708.707A7.476 7.476 0 0 1 13.025 8c0 2.071-.84 3.946-2.197 5.303l.708.707z"></path><path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.483 5.483 0 0 1 11.025 8a5.483 5.483 0 0 1-1.61 3.89l.706.706z"></path><path d="M10.025 8a4.486 4.486 0 0 1-1.318 3.182L8 10.475A3.489 3.489 0 0 0 9.025 8c0-.966-.392-1.841-1.025-2.475l.707-.707A4.486 4.486 0 0 1 10.025 8zM7 4a.5.5 0 0 0-.812-.39L3.825 5.5H1.5A.5.5 0 0 0 1 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 7 12V4zM4.312 6.39 6 5.04v5.92L4.312 9.61A.5.5 0 0 0 4 9.5H2v-3h2a.5.5 0 0 0 .312-.11z"></path></svg>
            <svg id="medV" viewBox="0 0 16 16" height="32px" width="32px" fill="white"><path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.483 5.483 0 0 1 11.025 8a5.483 5.483 0 0 1-1.61 3.89l.706.706z"></path><path d="M10.025 8a4.486 4.486 0 0 1-1.318 3.182L8 10.475A3.489 3.489 0 0 0 9.025 8c0-.966-.392-1.841-1.025-2.475l.707-.707A4.486 4.486 0 0 1 10.025 8zM7 4a.5.5 0 0 0-.812-.39L3.825 5.5H1.5A.5.5 0 0 0 1 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 7 12V4zM4.312 6.39 6 5.04v5.92L4.312 9.61A.5.5 0 0 0 4 9.5H2v-3h2a.5.5 0 0 0 .312-.11z"></path></svg>
            <svg id="lowV" viewBox="0 0 16 16" height="32px" width="32px" fill="white"><path d="M10.025 8a4.486 4.486 0 0 1-1.318 3.182L8 10.475A3.489 3.489 0 0 0 9.025 8c0-.966-.392-1.841-1.025-2.475l.707-.707A4.486 4.486 0 0 1 10.025 8zM7 4a.5.5 0 0 0-.812-.39L3.825 5.5H1.5A.5.5 0 0 0 1 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 7 12V4zM4.312 6.39 6 5.04v5.92L4.312 9.61A.5.5 0 0 0 4 9.5H2v-3h2a.5.5 0 0 0 .312-.11z"></path></svg>
            <svg id="noV" viewBox="0 0 16 16" height="32px" width="32px" fill="white"><path d="M6.717 3.55A.5.5 0 0 1 7 4v8a.5.5 0 0 1-.812.39L3.825 10.5H1.5A.5.5 0 0 1 1 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89a.5.5 0 0 1 .529-.06zM6 5.04 4.312 6.39A.5.5 0 0 1 4 6.5H2v3h2a.5.5 0 0 1 .312.11L6 10.96V5.04zm7.854.606a.5.5 0 0 1 0 .708L12.207 8l1.647 1.646a.5.5 0 0 1-.708.708L11.5 8.707l-1.646 1.647a.5.5 0 0 1-.708-.708L10.793 8 9.146 6.354a.5.5 0 1 1 .708-.708L11.5 7.293l1.646-1.647a.5.5 0 0 1 .708 0z"></path></svg>
        </button>
        <input type="range" id="volume-slider" min="0" max="100" value="50">
    </div>
    <audio id="audio" src="" preload="metadata">
</div>

<script>
    import { playerState } from '../player/Player.astro';

    let playBtn = document.getElementById("play") as HTMLButtonElement;
    let currentTime = document.getElementById("current-time");
    let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
    let durationTime = document.getElementById("duration");
    let audio = document.getElementById("audio") as HTMLAudioElement;
    let muteBtn = document.getElementById("mute");
    // let volume = document.getElementById("volume");
    let currentVolume = document.getElementById("volume-slider") as HTMLInputElement;
  
    seekSlider.disabled = true;
    playBtn.disabled = true;
    
    //player
    
    const changePlayerPlayBtn = (isOn = false) =>{
        const firstChild = playBtn.firstElementChild as HTMLElement;
        const lastChild = playBtn.lastElementChild as HTMLElement;
        if (isOn) {
            firstChild.style.display = "block";
            lastChild.style.display = "none";
        } else {
            firstChild.style.display = "none";
            lastChild.style.display = "block";
        }
    }

    const changeSongStatus = () =>{
        let singleSongButton = document.querySelectorAll(".singleSongButton") as NodeListOf<HTMLButtonElement>;
        let playPlaylist = document.getElementById("playPlaylist")?.lastElementChild as HTMLElement;
        let playPlaylistBtn = document.querySelectorAll(".playButton");
        if (audio.paused) {
            audio.play();
            playPlaylistBtn.forEach((element) => {
                element.firstElementChild.style.display = "none";
                element.lastElementChild.style.display = "block";
            });
            playPlaylistBtn[playerState.currentPlaylist].firstElementChild.style.display = "none";
            playPlaylistBtn[playerState.currentPlaylist].lastElementChild.style.display = "block";
            if(playerState.currentPlaylist == playerState.openedPlaylist){
                singleSongButton[playerState.currentSong].lastElementChild.style.display = "block";
                singleSongButton[playerState.currentSong].firstElementChild.style.display = "none";
                playPlaylist.firstElementChild.style.display = "none";
                playPlaylist.lastElementChild.style.display = "block";
            }
        } else {
            audio.pause();
            playPlaylistBtn.forEach((element) => {
                element.firstElementChild.style.display = "block";
                element.lastElementChild.style.display = "none";
            });
            playPlaylistBtn[playerState.currentPlaylist].firstElementChild.style.display = "block";
            playPlaylistBtn[playerState.currentPlaylist].lastElementChild.style.display = "none";
            if(playerState.currentPlaylist == playerState.openedPlaylist){
                singleSongButton[playerState.currentSong].lastElementChild.style.display = "none";
                singleSongButton[playerState.currentSong].firstElementChild.style.display = "block";
                playPlaylist.firstElementChild.style.display = "block";
                playPlaylist.lastElementChild.style.display = "none";
            }
        }
    }
    
    audio.addEventListener("play", () => {
        changePlayerPlayBtn();
    });
    
    audio.addEventListener("pause", () => {
        changePlayerPlayBtn(true);
    });

    playBtn.addEventListener("click", () => {
        changeSongStatus();
    });

    //displaying the duration of the song

    const displayDuration = (timeElapsed: number, duration = 0) => {
        if (currentTime) {
            currentTime.innerHTML = calculateTime(timeElapsed);
        }
        if (durationTime && duration !== 0) {
            durationTime.innerHTML = calculateTime(duration);
        }
        seekSlider.value = "0";
    };
  
    const calculateTime = (secs: number) => {
        const minutes = Math.floor(secs / 60);
        const seconds = Math.floor(secs % 60);
        if (seconds < 10) {
            return `${minutes}:0${seconds}`;
        } else if (seconds >= 10) {
            return `${minutes}:${seconds}`;
        } else {
            return `0:00`;
        }
    };

    //volume controls
    
    currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
    audio.volume = Number(currentVolume.value) / 200;
    
    const changeVolume = () =>{
        audio.volume = Number(currentVolume.value) / 200;
    }

    let turned = true;
    let lastVolume = 50;
    
    muteBtn?.addEventListener("click", () => {
        if(currentVolume.value == "0" && lastVolume == 0){
            return;
        }
        const [firstChild, secondChild, thirdChild, lastChild] = muteBtn?.children as HTMLCollectionOf<HTMLElement>;
        if(turned){
            lastVolume = parseInt(currentVolume.value);
            currentVolume.value = "0";
            firstChild.style.display = "none";
            secondChild.style.display = "none";
            thirdChild.style.display = "none";
            lastChild.style.display = "block";
        } else {
            currentVolume.value = lastVolume.toString();
            if(lastVolume > 65){
                firstChild.style.display = "block";
                secondChild.style.display = "none";
                thirdChild.style.display = "none";
                lastChild.style.display = "none";
            } else if(lastVolume > 35){
                firstChild.style.display = "none";
                secondChild.style.display = "block";
                thirdChild.style.display = "none";
                lastChild.style.display = "none";
            }
            else{
                firstChild.style.display = "none";
                secondChild.style.display = "none";
                thirdChild.style.display = "block";
                lastChild.style.display = "none";
            }
        }
        currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
        // if(volume) {
        //     volume.innerHTML = currentVolume.value.toString();
        // }
        changeVolume();
        turned = !turned;
    })

    currentVolume.addEventListener("input", () => {
        audio.volume = Number(currentVolume.value) / 200;
        const [firstChild, secondChild, thirdChild, lastChild] = muteBtn?.children as HTMLCollectionOf<HTMLElement>;
        if (Number(currentVolume.value) > 65) {
            firstChild.style.display = "block";
            secondChild.style.display = "none";
            thirdChild.style.display = "none";
            lastChild.style.display = "none";
        } else if (Number(currentVolume.value) > 35) {
            firstChild.style.display = "none";
            secondChild.style.display = "block";
            thirdChild.style.display = "none";
            lastChild.style.display = "none";
        } else if (Number(currentVolume.value) > 0) {
            firstChild.style.display = "none";
            secondChild.style.display = "none";
            thirdChild.style.display = "block";
            lastChild.style.display = "none";
        }
        else {
            firstChild.style.display = "none";
            secondChild.style.display = "none";
            thirdChild.style.display = "none";
            lastChild.style.display = "block";
        }
        currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
        // volume.innerHTML = currentVolume.value.toString();
        turned = true;
    });

    currentVolume?.addEventListener("change", () => {
        lastVolume = Number(currentVolume.value);
        turned != turned;
        changeVolume();
    });

    //timeline controls

    let tempValue = 0;
    seekSlider?.addEventListener("input", () => {
        if (audio && currentTime) {
            tempValue = Number(seekSlider.value);
            seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
            currentTime.innerHTML = calculateTime(tempValue);
        }
    });
    
    seekSlider?.addEventListener("change", () => {
        audio.currentTime = audio.duration * (Number(seekSlider.value) / Number(seekSlider.max));
        seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
        tempValue = 0;
    });

    const calTime = setInterval(() => {
        if (durationTime && tempValue == 0) {
            displayDuration(audio.currentTime);
            seekSlider.value = audio.currentTime.toString();
            seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
            if(isNaN(Number(seekSlider.max))){
                seekSlider.max = "0";
            }
            else{
                seekSlider.max = Math.floor(audio.duration).toString();
            }
        }
    }, 1000);

    audio?.addEventListener("loadedmetadata", () => {
        displayDuration(audio.currentTime, audio.duration);
        calTime;
        playBtn.removeAttribute("disabled");
        seekSlider.removeAttribute("disabled");
    });

    //loop and shuffle controls

    let randomBtn = document.getElementById("random");
    let loopBtn = document.getElementById("loop");

    loopBtn?.addEventListener("click", () => {
        loopBtn?.classList.toggle("on");
        playerState.isLooping = !playerState.isLooping;
        audio.loop = playerState.isLooping;
    });

    randomBtn?.addEventListener("click", () => {
        randomBtn?.classList.toggle("on");
        playerState.isShuffling = !playerState.isShuffling;
    });
</script>
<style>
    :root{
        --volume-before-width: 50%;
    }
    input[type="range"] {
        position: relative;
        -webkit-appearance: none;
        border-radius: 1rem;
    }
    input[type="range"]:disabled {
        background-color: #2a2b2c;
    }
    input[type="range"]::-webkit-slider-runnable-track {
        width: 100%;
        height: 5px;
        cursor: pointer;
    }
    input[type="range"]::-webkit-slider-thumb {
        visibility: hidden;
        position: relative;
        -webkit-appearance: none;
        box-sizing: content-box;
        border: 1px solid #2a2b2c;
        height: 16px;
        width: 16px;
        border-radius: 50%;
        background-color: #fff;
        cursor: pointer;
        margin: -7px 0 0 0;
    }
    input[type="range"]:hover::-webkit-slider-thumb {
        visibility: visible;
    }
    input[type="range"]::before {
        position: absolute;
        content: "";
        left: 0;
        height: 5px;
        background-color: var(--accent);
        border-radius: 1rem;
        cursor: pointer;
    }
    input[type="range"]:active::-webkit-slider-thumb {
        transform: scale(1.1);
    }
    #seek-slider::before{
        width: var(--seek-before-width);
    }
    #volume-slider{
        width: 100%;
        max-width: 8rem;
    }
    #volume-slider::before{
        width: var(--volume-before-width);
    }
    #seek-slider{
        width: 50vw;
    }
    #highV, #lowV, #noV{
        display: none;
    }
    #mute > svg{
        text-align: left;
    }
    #play :nth-child(2){
        display: none;
    }
    body{
        color: white;
    }
    button{
        background: none;
        border: none;
        color: white;
        padding: 0;
        margin: 0;
        font-size: 2rem;
		cursor: pointer;
    }
    #audioPlayer{
        position: fixed;
        bottom: 0;
        width: 96vw;
        background: #000;
        display: flex;
        flex-direction: row;
        align-items: center;
        z-index: 100;
        height: 11vh;
        min-height: 7.5rem;
        padding: 0 2vw 0 2vw;
    }
    #songControls{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 3vw;
    }
    #mainControls{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        width: 50%;
    }
    #play:disabled{
        background-color: rgb(150, 150, 150);
    }
    #play{
        clip-path: circle(50% at center);
        background-color: rgb(255, 255, 255);
        color: rgb(0, 0, 0);
        padding: 0.8rem;
        transition: ease-in-out 0.2s;
    }
    #play:hover :is(:disabled){
        background-color: rgb(201, 201, 201);
    }
    #random::after, #loop::after{
        content: "";
    }
    #random.on, #loop.on{
        color: rgb(146,75,236);
        height: 2rem;
    }
    #random.on::after, #loop.on::after{
        display: block;
        position: relative;
        content: "";
        width: 5px;
        height: 5px;
        justify-self: center;
        align-self: center;
        border-radius: 1rem;
        margin: auto;
        top: 5px;
        background-color: rgb(146,75,236);
    }
    #audioNavigation{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        width: 100%;
    }
    #volumeControl{
        width: 20%;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: right;
        margin-left: auto;
        max-width: 30%;
    }
    #songInfo{
        width: 25%;
    }
    #songInfo a:hover{
        text-decoration: underline;
        cursor: pointer;
    }
    #current-time{
        text-align: right;
    }
    svg{
        display: flex;
        align-items: center;
        justify-content: center;
    }
    #title, #artist{
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    #artist{
        color: rgb(150, 150, 150);
    }
    .time{
        -webkit-user-select: none;
        user-select: none;
    }
    @media screen and (max-width: 600px) {
        #audioPlayer{
            flex-direction: column;
            height: 16vh;
            min-height: 13rem;
            padding: 0;
            width: 100vw;
        }
        #volumeControl{
            display: none;
        }
        #title{
            margin-bottom: 0;
            margin-top: 0.5rem;
            font-size: 1.7rem;
        }
        #artist{
            margin: 0;
            font-size: 1.2rem;
        }
        #songInfo{
            width: 80%;
            margin: 0;
            text-align: center;
            max-width: none;
        }
        #songControls{
            gap: 2.5rem;
            order: 2;
        }
        #audioNavigation{
            width: 100%;
        }
        #mainControls{
            width: 100%;
            margin: 0.5rem;
        }
        #seek-slider{
            width: 70vw;
        }
    }
</style>