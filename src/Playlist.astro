<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div id="playlistMain">
        <button id="backButton">Back</button>
        <div>
            <img id="cover" src=>
            <h1 id="playlistTitle"></h1>
            <button id="playPlaylist">
                <svg viewBox="0 0 15 15" height="32px" width="32px"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill="currentColor" data-darkreader-inline-fill="" style="--darkreader-inline-fill: currentColor;"></path></svg>
                <svg viewBox="0 0 15 15" height="32px" width="32px"><path fill-rule="evenodd" clip-rule="evenodd" d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z" fill="currentColor" data-darkreader-inline-fill="" style="--darkreader-inline-fill: currentColor;"></path></svg>
            </button>
            <div style="display: flex; flex-direction: row; gap: 5%;"><p id="author"></p><p id="playlistLength">Playlist length</p></div>
            <ol id="songs">
            </ol>
        </div>
    </div>
</body>
</html>
<script>
    import playerState from './Player.astro';
    const playlistsData = [
        {
            "title": "Boruwa Originals",
            "img": "boruwa_originals.jpg",
            "author": "Boruwa's Assistant",
            "songs": [
                {
                    "title": "Daylight",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/daligh.mp3"
                },
                {
                    "title": "Five Nights At Freddy's",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/fred.mp3"
                }
            ]
        },
        {
            "title": "Modern Boruwas",
            "img": "modern_boruwas.jpg",
            "author": "Boruwa's Assistant",
            "songs": [
                {
                    "title": "Cheri Cheri Lady",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/cheri.mp3"
                },
                {
                    "title": "Brother Louie",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/brotherlouie.mp3"
                },
                {
                    "title": "Your My Heart Your My Soul",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/yourmyheart.mp3"
                }
            ]
        },
        {
            "title": "Boruwa Vocals",
            "img": "boruwa_vocals.jpg",
            "author": "Boruwa's Assistant",
            "songs": [
                {
                    "title": "Never Fade Away",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/neverfadeaway.mp3"
                },
                {
                    "title": "Paktofonika - Jestem Bogiem",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/paktofo.mp3"
                }
            ]
        },
        {
            "title": "Boruwa For Christmas",
            "img": "christmas_with_boruwa.jpg",
            "author": "Boruwa's Assistant",
            "songs": [
                {
                    "title": "Scareface (Push It To The Limit)",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/pushittothelimit.mp3"
                },
                {
                    "title": "Michael Jackson - Thriller",
                    "artist": "Boruwa's Assistant",
                    "source": "./songs/michael.mp3"
                }
            ]
        }
    ];

    let backButton = document.getElementById("backButton") as HTMLElement;
    let playlists = document.querySelectorAll("#song") as NodeListOf<HTMLElement>;
    let cover = document.getElementById("cover") as HTMLImageElement;
    let playlistTitle = document.getElementById("playlistTitle") as HTMLElement;
    let author = document.getElementById("author") as HTMLElement;
    let playlistLength = document.getElementById("playlistLength") as HTMLElement;
    let songsContainer = document.getElementById("songs") as HTMLElement;
    let playlistMain = document.getElementById("playlistMain") as HTMLElement;
    let main = document.getElementById("main") as HTMLElement;
    let playPlaylist = document.getElementById("playPlaylist") as HTMLElement;
    let audio = document.getElementById("audio") as HTMLAudioElement;
    let playNextBtn = document.getElementById("playNext") as HTMLElement;
    let playPreviousBtn = document.getElementById("playPrevious") as HTMLElement;
    let playBtn = document.querySelectorAll("#playButton");

    playPlaylist.lastElementChild.style.display = "none";

    let openedPlaylistID = 0;
    playlistMain.style.display = "none";
    main.style.display = "block";

    backButton?.addEventListener("click", () => {
        playlistMain.style.display = "none";
        main.style.display = "block";
        playlists.forEach((playlist) => {
            if(playlist.dataset.source != playerState.currentPlaylist){
                playBtn[playlist.dataset.source].firstElementChild.style.display = "block";
                playBtn[playlist.dataset.source].lastElementChild.style.display = "none";
            }
            else{
                if(audio.paused){
                    playBtn[playlist.dataset.source].firstElementChild.style.display = "block";
                    playBtn[playlist.dataset.source].lastElementChild.style.display = "none";
                    let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
                    singleSongButton[currentSong].firstElementChild.style.display = "block";
                    singleSongButton[currentSong].lastElementChild.style.display = "none";
                }
                else{
                    playBtn[playlist.dataset.source].firstElementChild.style.display = "none";
                    playBtn[playlist.dataset.source].lastElementChild.style.display = "block";
                    let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
                    singleSongButton[currentSong].firstElementChild.style.display = "none";
                    singleSongButton[currentSong].lastElementChild.style.display = "block";
                }
            }
        });
    });

    function formatDuration(durationInSeconds: number) {
        const minutes = Math.floor(durationInSeconds / 60);
        const seconds = Math.floor(durationInSeconds % 60);
        return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }

    let currentSong = NaN;

    function updatePlaylistInfo() {
        currentSong = playerState.currentSong;
        let playlistLengthNumber = 0;
        cover.src = playlistsData[openedPlaylistID].img;
        playlistTitle.textContent = playlistsData[openedPlaylistID].title;
        author.textContent = playlistsData[openedPlaylistID].author;
        songsContainer.innerHTML = "";
        playlistsData[openedPlaylistID].songs.forEach((song, i) => {
            let audioTemp = new Audio(song.source);
            // to powoduje że się losuje kolejność -- zrobione
            // a poza tym to coś jeszcze zmienia ikone songplaybuttona
            audioTemp.addEventListener("loadedmetadata", () => {
                let songElement = document.createElement("div");
                songElement.innerHTML += `<button id="singleSongButton" data-source='${song.source}' data-openedPlaylistID='${openedPlaylistID}' style="border: none; background: none; color: white; cursor: pointer; margin: 0; width: 3rem;">
                    <svg viewBox="0 0 15 15" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill="currentColor"></path></svg>
                    <svg viewBox="0 0 15 15" fill="none" style="display: none;"><path fill-rule="evenodd" clip-rule="evenodd" d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z" fill="currentColor"></path></svg>
                    </button><li>${song.title} - ${song.artist} - Length: ${formatDuration(audioTemp.duration)}</li>`;
                if(i > songsContainer.childElementCount){
                    songsContainer.appendChild(songElement);
                }
                else{
                    songsContainer.insertBefore(songElement, songsContainer.children[i]);
                }
                let singleSongButtons = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
                playlistLengthNumber += audioTemp.duration;
                playlistLength.textContent = "Playlist length: " + formatDuration(playlistLengthNumber);
                singleSongButtons.forEach((playSongBtn, index) => {
                    let playIco = playSongBtn.firstElementChild as HTMLElement;
                    let pauseIco = playSongBtn.lastElementChild as HTMLElement;
                    console.log(index, currentSong, openedPlaylistID, playerState.currentPlaylist, audio.paused);
                    if(index != currentSong || openedPlaylistID != playerState.currentPlaylist || audio.paused){
                        playIco.style.display = "block";
                        pauseIco.style.display = "none";
                    }
                    else{
                        playIco.style.display = "none";
                        pauseIco.style.display = "block";
                    }
                    playSongBtn.addEventListener("click", () => {
                        console.log("HALO");
                        let playBtn = document.getElementById("play") as HTMLButtonElement;
                        let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
                        playBtn.removeAttribute("disabled");
                        seekSlider.removeAttribute("disabled");
                        openedPlaylistID = parseInt(playSongBtn.dataset.openedplaylistid);
                        playerState.currentPlaylist = openedPlaylistID;
                        if (playIco && pauseIco) {
                            if(currentSong != index || playerState.audioSource != playSongBtn.dataset.source)
                            {
                                currentSong = index;
                                playerState.audioSource = playSongBtn.dataset.source;
                                audio.src = playerState.audioSource;
                                audio.play();
                            }
                            else{
                                if(audio.paused)
                                {
                                    audio.play();
                                }
                                else {
                                    audio.pause();
                                }
                            }
                            singleSongButtons.forEach((playSongBtn, index) => {
                                let playIco = playSongBtn.firstElementChild as HTMLElement;
                                let pauseIco = playSongBtn.lastElementChild as HTMLElement;
                                console.log(index != currentSong, openedPlaylistID != playerState.currentPlaylist, audio.paused);
                                if(index != currentSong || audio.paused){
                                    console.log("playIco", index)
                                    playIco.style.display = "block";
                                    pauseIco.style.display = "none";
                                }
                                else{
                                    console.log("pauseIco", index)
                                    playIco.style.display = "none";
                                    pauseIco.style.display = "block";
                                }
                            });
                        }
                    });
                });
            });         
        });
    }

    const changeButtonAppearance = (playSongBtn: Element, check = false) => {
        console.log("kkkk", check);
        let playIco = playSongBtn.firstElementChild as HTMLElement;
        let pauseIco = playSongBtn.lastElementChild as HTMLElement;
        playIco.style.display = "none";
        pauseIco.style.display = "block";
        if(playlistsData[openedPlaylistID].songs[currentSong]){
            if(playlistsData[openedPlaylistID].songs[currentSong].source != playerState.audioSource && !check)
            {
                playerState.audioSource = playlistsData[openedPlaylistID].songs[currentSong].source;
                audio.src = playerState.audioSource;
                audio.play();
                playIco.style.display = "none";
                pauseIco.style.display = "block";
                return;
            }
        }
        if(audio.paused)
        {
            if (!check){
                audio.play();
            }
            playIco.style.display = "none";
            pauseIco.style.display = "block";
        }
        else {
            if (!check){
                audio.pause();
            }
            playIco.style.display = "block";
            pauseIco.style.display = "none";
        }
    }

    const changeAllAppearances = () =>{
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        if(isNaN(currentSong)){
            currentSong = 0;
        }
        changeButtonAppearance(singleSongButton[currentSong]);
        let playBtn = document.getElementById("play") as HTMLButtonElement;
        let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
        seekSlider.removeAttribute("disabled");
        playBtn.removeAttribute("disabled");
        playerState.currentPlaylist = openedPlaylistID;
    }

    playPlaylist.addEventListener("click", () =>{
        changeAllAppearances();
        console.log("playPlaylist");
    });

    playlists.forEach((playlist, index) => {
        playlist.addEventListener("click", () => {
            playlistMain.style.display = "block";
            main.style.display = "none";
            openedPlaylistID = index;
            console.log(playerState.currentPlaylist, openedPlaylistID)
            console.log(openedPlaylistID != playerState.currentPlaylist);
            //window.location.href = "/playlist/" + openedPlaylistID;
            updatePlaylistInfo();
            if(openedPlaylistID != playerState.currentPlaylist || audio.paused){
                playPlaylist.firstElementChild.style.display = "block";
                playPlaylist.lastElementChild.style.display = "none";
            }
            else{
                playPlaylist.firstElementChild.style.display = "none";
                playPlaylist.lastElementChild.style.display = "block";
            }
        });
    });
    
    const playNextSong = () =>{
        currentSong++;
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        if(singleSongButton[currentSong]){
            singleSongButton.forEach(songButton => {
                let playIco = songButton.firstElementChild as HTMLElement;
                let pauseIco = songButton.lastElementChild as HTMLElement;
                playIco.style.display = "block";
                pauseIco.style.display = "none";
            });
            changeButtonAppearance(singleSongButton[currentSong]);
        }
        else{
            currentSong--;
        }
    }
    
    const playPreviousSong = () =>{
        currentSong--;
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        if(singleSongButton[currentSong]){
            changeButtonAppearance(singleSongButton[currentSong]);
        }
        else{
            currentSong++;
        }
    }

    playNextBtn.addEventListener("click", () => {
        playNextSong();
    });

    playPreviousBtn.addEventListener("click", () => {
        playPreviousSong();
    });

    let randomBtn = document.getElementById("random");

    randomBtn?.addEventListener("click", () => {
        randomBtn?.classList.toggle("on");
        playerState.isShuffling = !playerState.isShuffling;
    });

    audio.addEventListener("ended", () => {
        playNextSong();
    });

    audio.addEventListener("play", () => {
        console.log("play");
        playPlaylist.firstElementChild.style.display = "none";
        playPlaylist.lastElementChild.style.display = "block";
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        singleSongButton[currentSong].firstElementChild.style.display = "none";
        singleSongButton[currentSong].lastElementChild.style.display = "block";
    });

    audio.addEventListener("pause", () => {
        console.log("pause");
        playPlaylist.firstElementChild.style.display = "block";
        playPlaylist.lastElementChild.style.display = "none";
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        console.log(currentSong)
        singleSongButton[currentSong].firstElementChild.style.display = "block";
        singleSongButton[currentSong].lastElementChild.style.display = "none";
    });
</script>
<style>
    #cover{
        width: 10rem;
        height: 10rem;
        border-radius: 1rem;
    }
    #playlistMain{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }
    #playlistMain div{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }
    #playlistMain div p{
        margin: 0;
    }
    #playlistMain div p:first-child{
        font-size: 1.5rem;
    }
    #playlistMain div p:last-child{
        font-size: 1rem;
    }
    #backButton{
        border: none;
        background: none;
        color: white;
        cursor: pointer;
        margin: none;
        width: 3rem;
    }
    #playPlaylist{
        border: none;
        background: none;
        color: white;
        cursor: pointer;
        padding: 0;
    }
    #playPlaylist svg{
        width: 3rem;
        height: 3rem;
    }
</style>