---
import { RxPlay, RxPause } from 'react-icons/rx';
import { ViewTransitions } from 'astro:transitions';
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <ViewTransitions />
</head>
<body>
    <div id="playlistMain">
        <button id="backButton">Back</button>
        <div>
            <img id="cover" src=>
            <h1 id="playlistTitle"></h1>
            <button id="playPlaylist"><RxPlay/><RxPause/></button>
            <div style="display: flex; flex-direction: row; gap: 5%;"><p id="author"></p><p id="playlistLength">Playlist length</p></div>
            <ol id="songs">
            </ol>
        </div>
    </div>
</body>
</html>
<script>
    import { playerState } from './Player.astro';
    const playlistsData = [
        {
            "title": "Boruwa Originals",
            "img": "boruwa_originals.jpg",
            "author": "Artist 1",
            "songs": [
                {
                    "title": "Song 1",
                    "artist": "Artist 1",
                    "source": "./kebsonken.mp3"
                },
                {
                    "title": "Song 2",
                    "artist": "Artist 2",
                    "source": "./kebsonken.mp3"
                }
            ]
        },
        {
            "title": "Modern Boruwas",
            "img": "modern_boruwas.jpg",
            "author": "Artist 2",
            "songs": [
                {
                    "title": "Song 3",
                    "artist": "Artist 3",
                    "source": "./kebsonken.mp3"
                },
                {
                    "title": "Song 4",
                    "artist": "Artist 4",
                    "source": "./kebsonken.mp3"
                }
            ]
        },
        {
            "title": "Boruwa Vocals",
            "img": "boruwa_vocals.jpg",
            "author": "Artist 3",
            "songs": [
                {
                    "title": "Song 5",
                    "artist": "Artist 5",
                    "source": "./kebsonken.mp3"
                },
                {
                    "title": "Song 6",
                    "artist": "Artist 6",
                    "source": "./kebsonken.mp3"
                }
            ]
        },
        {
            "title": "Boruwa For Christmas",
            "img": "christmas_with_boruwa.jpg",
            "author": "Artist 4",
            "songs": [
                {
                    "title": "Song 7",
                    "artist": "Artist 7",
                    "source": "kebsonken.mp3"
                },
                {
                    "title": "Song 8",
                    "artist": "Artist 8",
                    "source": "kebsonken.mp3"
                }
            ]
        }
    ];

    let backButton = document.getElementById("backButton") as HTMLElement;
    let playlists = document.querySelectorAll("#song") as NodeListOf<HTMLElement>;
    let cover = document.getElementById("cover") as HTMLImageElement;
    let playlistTitle = document.getElementById("playlistTitle") as HTMLElement;
    let author = document.getElementById("author") as HTMLElement;
    let playlistLength = document.getElementById("playlistLength") as HTMLElement;
    let songsContainer = document.getElementById("songs") as HTMLElement;
    let playlistMain = document.getElementById("playlistMain") as HTMLElement;
    let main = document.getElementById("main") as HTMLElement;
    let playPlaylist = document.getElementById("playPlaylist") as HTMLElement;
    let audio = document.getElementById("audio") as HTMLAudioElement;

    playPlaylist.lastChild.style.display = "none";

    let playlistId = 0;
    playlistMain.style.display = "none";
    main.style.display = "block";

    backButton?.addEventListener("click", () => {
        playlistMain.style.display = "none";
        main.style.display = "block";
    });

    
    function formatDuration(durationInSeconds: number) {
        const minutes = Math.floor(durationInSeconds / 60);
        const seconds = Math.floor(durationInSeconds % 60);
        return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }
    


    function updatePlaylistInfo() {
        cover.src = playlistsData[playlistId].img;
        playlistTitle.textContent = playlistsData[playlistId].title;
        author.textContent = playlistsData[playlistId].author;
        songsContainer.innerHTML = "";
        playlistsData[playlistId].songs.map((song) => {
            const audioTemp = new Audio(song.source);
            audioTemp.addEventListener('loadedmetadata', () => {
                songsContainer.innerHTML += `<div><button id="singleSongButton" data-source='${song.source}' data-playlistID='${playlistId + 1}' style="border: none; background: none; color: white; cursor: pointer; margin: 0; width: 3rem;">
                    <svg viewBox="0 0 15 15" fill="none" id="firstChild"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill="currentColor"></path></svg>
                    <svg viewBox="0 0 15 15" fill="none" id="lastChild" display="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z" fill="currentColor"></path></svg>
                    </button><li>${song.title} - ${song.artist} - Length: ${formatDuration(audioTemp.duration)}</li></div>`;
                let singleSongButtons = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
                singleSongButtons.forEach((playSongBtn) => {
                    playSongBtn.addEventListener("click", () => {
                        let playIco = playSongBtn.querySelector("#firstChild") as HTMLElement;
                        let pauseIco = playSongBtn.querySelector("#lastChild") as HTMLElement;
                        playIco.style.display = "none";
                        pauseIco.style.display = "block";
                        let playBtn = document.getElementById("play") as HTMLButtonElement;
                        let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
                        seekSlider.removeAttribute("disabled");
                        playBtn.removeAttribute("disabled");
                        if (playIco && pauseIco) {
                            if(playerState.audioSource != playSongBtn.dataset.source)
                            {
                                playerState.audioSource = playSongBtn.dataset.source;
                                audio.src = playerState.audioSource;
                            }
                            if(audio.paused)
                            {
                                console.log("audio paused", audio.paused)
                                audio.play();
                                console.log("audio paused", audio.paused)
                                playIco.style.display = "none";
                                pauseIco.style.display = "block";
                            }
                            else {
                                audio.pause();
                                playIco.style.display = "block";
                                pauseIco.style.display = "none";
                            }
                        }
                        playerState.currentPlaylist = parseInt(playSongBtn.dataset.playlistID || "");
                    });
                });
            });
        });
    }
    audio.src = playerState.audioSource;
    const changePlaySongAppearance = (playSongBtn: Element) => {
        let playIco = playSongBtn.firstChild as HTMLElement;
        let pauseIco = playSongBtn.lastChild as HTMLElement;
        playIco.style.display = "none";
        pauseIco.style.display = "block";
        if(audio.paused)
        {
            console.log("audio paused", audio.paused)
            audio.play();
            console.log("audio paused", audio.paused)
            playIco.style.display = "none";
            pauseIco.style.display = "block";
        }
        else {
            audio.pause();
            playIco.style.display = "block";
            pauseIco.style.display = "none";
        }
    }

    playPlaylist.addEventListener("click", () =>{
        if(playerState.audioSource != playlistsData[playlistId].songs[0].source)
        {
            playerState.audioSource = playlistsData[playlistId].songs[0].source;
            audio.src = playerState.audioSource;
        }
        console.log(audio.src)
        playerState.currentPlaylist = playlistId;
        let playBtn = document.getElementById("play") as HTMLButtonElement;
        let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
        seekSlider.removeAttribute("disabled");
        playBtn.removeAttribute("disabled");
        changePlaySongAppearance(playPlaylist);
    });

    playlists.forEach((playlist, index) => {
        playlist.addEventListener("click", () => {
            playlistMain.style.display = "block";
            main.style.display = "none";
            // window.location.href = "/playlist/" + playlistId;
            updatePlaylistInfo();
        });
    });

    function changePlaylistPlayBtn(paused = false) {
        let playIco = playPlaylist.firstChild as HTMLElement;
        let pauseIco = playPlaylist.lastChild as HTMLElement;
        if (playIco && pauseIco) {
            if(!paused && playerState.currentPlaylist == playlistId)
            {
                playIco.style.display = "none";
                pauseIco.style.display = "block";
            }
            else{
                playIco.style.display = "block";
                pauseIco.style.display = "none";
            }
        }
    }

    const changeSingleSongPlayBtn = () =>{
        let singleSongButtons = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        singleSongButtons.forEach((playSongBtn) => {
            let playIco = playSongBtn.firstChild as HTMLElement;
            let pauseIco = playSongBtn.lastChild as HTMLElement;
            if (playIco && pauseIco) {
                if(!audio.paused && playerState.audioSource == playSongBtn.dataset.source)
                {
                    playIco.style.display = "none";
                    pauseIco.style.display = "block";
                }
                else{
                    playIco.style.display = "block";
                    pauseIco.style.display = "none";
                }
            }
        });
    }

    audio.addEventListener("play", () => {
        if (audio instanceof HTMLAudioElement) {
            changePlaylistPlayBtn();
            changeSingleSongPlayBtn();
        }
    });
    
    audio.addEventListener("pause", () => {
        if (audio instanceof HTMLAudioElement) {
            changePlaylistPlayBtn(true);
            changeSingleSongPlayBtn();
        }
    });
</script>
<style>
    #cover{
        width: 10rem;
        height: 10rem;
        border-radius: 1rem;
    }
    #playlistMain{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }
    #playlistMain div{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }
    #playlistMain div p{
        margin: 0;
    }
    #playlistMain div p:first-child{
        font-size: 1.5rem;
    }
    #playlistMain div p:last-child{
        font-size: 1rem;
    }
    #backButton{
        border: none;
        background: none;
        color: white;
        cursor: pointer;
        margin: none;
        width: 3rem;
    }
    #playPlaylist{
        border: none;
        background: none;
        color: white;
        cursor: pointer;
        padding: 0;
    }
    #playPlaylist svg{
        width: 3rem;
        height: 3rem;
    }
</style>