---
// import { ViewTransitions } from 'astro:transitions';
import { RxPlay, RxPause } from 'react-icons/rx';
---

<head>
    <div id="playlistMain">
        <button id="backButton">Back</button>
        <div>
            <img id="cover" src=>
            <h1 id="playlistTitle"></h1>
            <button id="playPlaylist"><RxPlay/><RxPause/></button>
            <div style="display: flex; flex-direction: row; gap: 5%;"><p id="author"></p><p id="playlistLength">Playlist length</p></div>
            <ol id="songs">
            </ol>
        </div>
    </div>
    <!-- <ViewTransitions /> -->
</head>
<script>
    import { playerState } from './Player.astro';
    const playlistsData = [
        {
            "title": "Boruwa Originals",
            "img": "boruwa_originals.jpg",
            "author": "Artist 1",
            "songs": [
                {
                    "title": "Song 1",
                    "artist": "Artist 1",
                    "source": "./kebsonken.mp3"
                },
                {
                    "title": "Song 2",
                    "artist": "Artist 2",
                    "source": "./kebsonken.mp3"
                }
            ]
        },
        {
            "title": "Modern Boruwas",
            "img": "modern_boruwas.jpg",
            "author": "Artist 2",
            "songs": [
                {
                    "title": "Song 3",
                    "artist": "Artist 3",
                    "source": "./kebsonken.mp3"
                },
                {
                    "title": "Song 4",
                    "artist": "Artist 4",
                    "source": "./kebsonken.mp3"
                }
            ]
        },
        {
            "title": "Boruwa Vocals",
            "img": "boruwa_vocals.jpg",
            "author": "Artist 3",
            "songs": [
                {
                    "title": "Song 5",
                    "artist": "Artist 5",
                    "source": "./kebsonken.mp3"
                },
                {
                    "title": "Song 6",
                    "artist": "Artist 6",
                    "source": "./kebsonken.mp3"
                }
            ]
        },
        {
            "title": "Boruwa For Christmas",
            "img": "christmas_with_boruwa.jpg",
            "author": "Artist 4",
            "songs": [
                {
                    "title": "Song 7",
                    "artist": "Artist 7",
                    "source": "kebsonken.mp3"
                },
                {
                    "title": "Song 8",
                    "artist": "Artist 8",
                    "source": "kebsonken.mp3"
                }
            ]
        }
    ];
    
    let backButton = document.getElementById("backButton") as HTMLElement;
    let playlists = document.querySelectorAll("#song") as NodeListOf<HTMLElement>;
    let cover = document.getElementById("cover") as HTMLImageElement;
    let playlistTitle = document.getElementById("playlistTitle") as HTMLElement;
    let author = document.getElementById("author") as HTMLElement;
    let playlistLength = document.getElementById("playlistLength") as HTMLElement;
    let songsContainer = document.getElementById("songs") as HTMLElement;
    let playlistMain = document.getElementById("playlistMain") as HTMLElement;
    let main = document.getElementById("main") as HTMLElement;
    
    let playlistId = 0;
    playlistMain.style.display = "none";
    main.style.display = "block";
    
    backButton?.addEventListener("click", () => {
        playlistMain.style.display = "none";
        main.style.display = "block";
    });

    
    function formatDuration(durationInSeconds: number) {
        const minutes = Math.floor(durationInSeconds / 60);
        const seconds = Math.floor(durationInSeconds % 60);
        return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }
    
    const audio = document.getElementById("audio") as HTMLAudioElement;
    
    const playSong = (playSongBtn: Element) =>{
        let playIco = playSongBtn.querySelector("#firstChild") as HTMLElement;
        let pauseIco = playSongBtn.querySelector("#lastChild") as HTMLElement;
        playIco.style.display = "none";
        pauseIco.style.display = "block";
        if (playIco && pauseIco) {
            if(audio.src != playerState.audioSource)
            {
                audio.src = playerState.audioSource;
            }
            if(audio.paused)
            {
                audio.play();
                playIco.style.display = "none";
                pauseIco.style.display = "block";
            }
            else{
                audio.pause();
                playIco.style.display = "block";
                pauseIco.style.display = "none";
            }
            playerState.isPlaying = !playerState.isPlaying;
        }
    }
    
    function updatePlaylistInfo() {
        cover.src = playlistsData[playlistId].img;
        playlistTitle.textContent = playlistsData[playlistId].title;
        author.textContent = playlistsData[playlistId].author;
        songsContainer.innerHTML = "";
        playlistsData[playlistId].songs.map((song) => {
            const audio = new Audio(song.source);
            audio.load();
            audio.addEventListener('loadedmetadata', () => {
                songsContainer.innerHTML += `<button id="playSong" data-source='${song.source}'>
                    <svg viewBox="0 0 15 15" fill="none" id="firstChild"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill="currentColor"></path></svg>
                    <svg viewBox="0 0 15 15" fill="none" id="lastChild"><path fill-rule="evenodd" clip-rule="evenodd" d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z" fill="currentColor"></path></svg>
                    </button><li>${song.title} - ${song.artist} - Length: ${formatDuration(audio.duration)}</li>`;
                let playSongBtns = document.querySelectorAll("#playSong") as NodeListOf<HTMLButtonElement>;
                playSongBtns.forEach((playSongBtn) => {
                    // const playIco = playSongBtn.firstChild as HTMLElement;
                    // const pauseIco = playSongBtn.lastChild as HTMLElement;
                    // if (playIco && pauseIco) {
                    //     playIco.style.display = "block";
                    //     pauseIco.style.display = "none";
                    // }
                    playSongBtn.addEventListener("click", () => {
                        playSong(playSongBtn);
                        playerState.currentPlaylist = playlistsData[playlistId].songs;
                    });
                });
            });
        });
    }

    playPlaylist.addEventListener("click", () => {
        audio.src = (playlistsData[playlistId].songs[0].source);
        if(audio.paused){
            audio.play();
        } else{
            audio.pause();
        }
    });
    playlists.forEach((playlist, index) => {
        playlist.addEventListener("click", () => {
            playlistId = index;
            playerState.currentPlaylist = index.toString();
            console.log(playerState.currentPlaylist);
            playlistMain.style.display = "block";
            main.style.display = "none";
            // window.location.href = "/playlist/" + playlistId;
            updatePlaylistInfo();
        });
    });
</script>
<style>
    #cover{
        width: 10rem;
        height: 10rem;
        border-radius: 1rem;
    }
    #playlistMain{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }
    #playlistMain div{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }
    #playlistMain div p{
        margin: 0;
    }
    #playlistMain div p:first-child{
        font-size: 1.5rem;
    }
    #playlistMain div p:last-child{
        font-size: 1rem;
    }
</style>