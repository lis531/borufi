<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div id="playlistMain" style="display: none;">
        <button id="backButton">
            <svg stroke="black" viewBox="0 0 512 512" height="32px" width="32px"><path fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="M328 112L184 256l144 144"></path></svg>        </button>
        <div>
            <div id="playlistTop">
                <div id="playPlaylist">
                    <img id="cover" src="">
                    <button>
                        <svg viewBox="0 0 15 15" height="32px" width="32px"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill="currentColor"></path></svg>
                        <svg viewBox="0 0 15 15" height="32px" width="32px"><path fill-rule="evenodd" clip-rule="evenodd" d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z" fill="currentColor"></path></svg>
                    </button>
                </div>
                <div>
                    <h1 id="playlistTitle"></h1>
                    <div id="playlistInfo"><p id="author"></p><p id="playlistLength">Playlist length</p></div>
                </div>
            </div>
            <table id="songsTable">
                <thead>
                        <th style="width: 4vw;"></th>
                        <th style="width: 3vw;">#</th>
                        <th style="width: 25vw;">Title</th>
                        <th style="width: 25vw;">Artist</th>
                        <th style="width: 5vw;">Length</th>
                </thead>
                <tbody id="songs">
                </tbody>
            </table>
        </div>
    </div>
</body>
</html>
<script>
    import { playerState } from "../player/Player.astro";

	import { firebaseConfig } from '../firebaseConfig.astro';
    import { initializeApp } from 'firebase/app';
    import { getStorage, ref as storageRef, getDownloadURL } from 'firebase/storage';
    import { ref as dbRef, get, getDatabase } from 'firebase/database';

    const firebaseApp = initializeApp(firebaseConfig);
    const storage = getStorage(firebaseApp);
    const coversRef = storageRef(storage, 'covers/boruwa_originals.jpg');
    const db = getDatabase(firebaseApp);
    const playlistData = dbRef(db, 'songData');
    const playlistDataSnapshot = await get(playlistData);
    const playlistsData = playlistDataSnapshot.val();
    


    let backButton = document.getElementById("backButton") as HTMLElement;
    let playlists = document.querySelectorAll("#song") as NodeListOf<HTMLElement>;
    let cover = document.getElementById("cover") as HTMLImageElement;
    let playlistTitle = document.getElementById("playlistTitle") as HTMLElement;
    let author = document.getElementById("author") as HTMLElement;
    let playlistLength = document.getElementById("playlistLength") as HTMLElement;
    let songsContainer = document.getElementById("songs") as HTMLElement;
    let playlistMain = document.getElementById("playlistMain") as HTMLElement;
    let main = document.getElementById("main") as HTMLElement;
    let playPlaylist = document.getElementById("playPlaylist")?.lastElementChild as HTMLElement;
    let audio = document.getElementById("audio") as HTMLAudioElement;
    let playNextBtn = document.getElementById("playNext") as HTMLElement;
    let playPreviousBtn = document.getElementById("playPrevious") as HTMLElement;
    let playBtn = document.querySelectorAll("#playButton");
    const imgPlayElement = document.getElementById('imgPlay');
    
    try {
        const url = await getDownloadURL(coversRef);
        imgPlayElement.src = url;
    } catch (error) {
        console.error('Error getting download URL:', error);
    }
    
    const setAudioSource = async (source: string, play: boolean = false) => {
        const songRef = storageRef(storage, 'songs/' + source);
        const songURL = await getDownloadURL(songRef);
        audio.src = songURL;
        if(play){
            audio.play();
        }
    }
    
    playPlaylist.lastElementChild.style.display = "none";

    let openedPlaylistID = 0;

    backButton?.addEventListener("click", () => {
        playlistMain.style.display = "none";
        main.style.display = "flex";
        playlists.forEach((playlist) => {
            if(playlist.dataset.source != playerState.currentPlaylist){
                playBtn[playlist.dataset.source].firstElementChild.style.display = "block";
                playBtn[playlist.dataset.source].lastElementChild.style.display = "none";
            }
            else{
                if(audio.paused){
                    playBtn[playlist.dataset.source].firstElementChild.style.display = "block";
                    playBtn[playlist.dataset.source].lastElementChild.style.display = "none";
                    let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
                    singleSongButton[currentSong].firstElementChild.style.display = "block";
                    singleSongButton[currentSong].lastElementChild.style.display = "none";
                }
                else{
                    playBtn[playlist.dataset.source].firstElementChild.style.display = "none";
                    playBtn[playlist.dataset.source].lastElementChild.style.display = "block";
                    let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
                    singleSongButton[currentSong].firstElementChild.style.display = "none";
                    singleSongButton[currentSong].lastElementChild.style.display = "block";
                }
            }
        });
    });

    function formatDuration(durationInSeconds: number) {
        const minutes = Math.floor(durationInSeconds / 60);
        const seconds = Math.floor(durationInSeconds % 60);
        return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }

    let currentSong = NaN;

    async function updatePlaylistInfo() {
        currentSong = playerState.currentSong;
        let playlistLengthNumber = 0;
        const coverRef = storageRef(storage, 'covers/' + playlistsData[openedPlaylistID].img);
        const coverUrl = await getDownloadURL(coverRef);
        cover.src = coverUrl;
        playlistTitle.textContent = playlistsData[openedPlaylistID].title;
        author.textContent = playlistsData[openedPlaylistID].author;
        var songs = songsContainer.querySelectorAll("tr") as NodeListOf<HTMLElement>;
        songs.forEach((song) => {
            song.remove();
        });
        cover.src = coverUrl;
        playlistsData[openedPlaylistID].songs.forEach(async (song, i) => {
            const songRef = storageRef(storage, 'songs/' + song.source);
            const songURL = await getDownloadURL(songRef);
            let audioTemp = new Audio(songURL);
            audioTemp.addEventListener("loadedmetadata", () => {
                let songElement = document.createElement("tr");
                songElement.style.height = "3rem";
                songElement.innerHTML += `
                    <td style="display: flex; height: inherit; padding-right: 1rem;">
                        <button id="singleSongButton" data-id='${i}' data-openedPlaylistID='${openedPlaylistID}' style="padding: 0; border: none; background: none; color: white; cursor: pointer;">
                            <svg viewBox="0 0 16 16" width="32px" height="32px"><path fill-rule="evenodd" clip-rule="evenodd" d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill="currentColor"></path></svg>
                            <svg viewBox="0 0 16 16" style="display: none;" width="32px" height="32px"><path fill-rule="evenodd" clip-rule="evenodd" d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z" fill="currentColor"></path></svg>
                        </button>
                    </td>
                    <td style="padding-right: 1rem;">${i + 1}</td>
                    <td style="padding-right: 1rem;">${song.title}</td>
                    <td style="padding-right: 1rem;">${song.artist}</td>
                    <td>${formatDuration(audioTemp.duration)}</td>`;
                if(i > songsContainer.childElementCount){
                    songsContainer.appendChild(songElement);
                }
                else{
                    songsContainer.insertBefore(songElement, songsContainer.children[i]);
                }
                let singleSongButtons = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
                playlistLengthNumber += audioTemp.duration;
                playlistLength.textContent = "Playlist length: " + formatDuration(playlistLengthNumber);
                singleSongButtons.forEach((playSongBtn, index) => {
                    let playIco = playSongBtn.firstElementChild as HTMLElement;
                    let pauseIco = playSongBtn.lastElementChild as HTMLElement;
                    if(index != currentSong || openedPlaylistID != playerState.currentPlaylist || audio.paused){
                        playIco.style.display = "block";
                        pauseIco.style.display = "none";
                    }
                    else{
                        playIco.style.display = "none";
                        pauseIco.style.display = "block";
                    }
                    if(playSongBtn.getAttribute("listener")){
                        return;
                    }
                    playSongBtn.addEventListener("click", () => {
                        let playBtn = document.getElementById("play") as HTMLButtonElement;
                        let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
                        playBtn.removeAttribute("disabled");
                        seekSlider.removeAttribute("disabled");
                        openedPlaylistID = parseInt(playSongBtn.dataset.openedplaylistid);
                        playerState.currentPlaylist = openedPlaylistID;
                        const titlePlayer = document.getElementById("title") as HTMLElement;
                        const artistPlayer = document.getElementById("artist") as HTMLElement;
                        titlePlayer.textContent = playlistsData[openedPlaylistID].songs[index].title;
                        artistPlayer.textContent = playlistsData[openedPlaylistID].songs[index].artist;
                        if (playIco && pauseIco) {
                            if(currentSong != index || playerState.audioSource != playSongBtn.dataset.source)
                            {
                                currentSong = index;
                                setAudioSource(song.source, true);
                            }
                            else{
                                if(audio.paused)
                                {
                                    audio.play();
                                }
                                else {
                                    audio.pause();
                                }
                            }
                            singleSongButtons.forEach((playSongBtn, index) => {
                                let playIco = playSongBtn.firstElementChild as HTMLElement;
                                let pauseIco = playSongBtn.lastElementChild as HTMLElement;
                                if(index != currentSong || audio.paused){
                                    playIco.style.display = "block";
                                    pauseIco.style.display = "none";
                                }
                                else{
                                    playIco.style.display = "none";
                                    pauseIco.style.display = "block";
                                }
                            });
                        }
                    });
                });
            });         
        });
    }

    const changeButtonAppearance = (playSongBtn: Element, check = false) => {
        let playIco = playSongBtn.firstElementChild as HTMLElement;
        let pauseIco = playSongBtn.lastElementChild as HTMLElement;
        playIco.style.display = "none";
        pauseIco.style.display = "block";
        if(playlistsData[openedPlaylistID].songs[currentSong]){
            if(playlistsData[openedPlaylistID].songs[currentSong].source != playerState.audioSource && !check)
            {
                setAudioSource(playlistsData[openedPlaylistID].songs[currentSong].source, true);
                playIco.style.display = "none";
                pauseIco.style.display = "block";
                return;
            }
        }
        if(audio.paused)
        {
            if (!check){
                audio.play();
            }
            playIco.style.display = "none";
            pauseIco.style.display = "block";
        }
        else {
            if (!check){
                audio.pause();
            }
            playIco.style.display = "block";
            pauseIco.style.display = "none";
        }
    }

    const changeAllAppearances = () =>{
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        if(isNaN(currentSong)){
            currentSong = 0;
        }
        changeButtonAppearance(singleSongButton[currentSong]);
        let playBtn = document.getElementById("play") as HTMLButtonElement;
        let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
        seekSlider.removeAttribute("disabled");
        playBtn.removeAttribute("disabled");
        playerState.currentPlaylist = openedPlaylistID;
    }

    playPlaylist.addEventListener("click", () =>{
        changeAllAppearances();
    });

    playlists.forEach((playlist, index) => {
        playlist.addEventListener("click", () => {
            playlistMain.style.display = "block";
            main.style.display = "none";
            openedPlaylistID = index;
            //window.location.href = "/playlist/" + openedPlaylistID;
            updatePlaylistInfo();
            if(openedPlaylistID != playerState.currentPlaylist || audio.paused){
                playPlaylist.firstElementChild.style.display = "block";
                playPlaylist.lastElementChild.style.display = "none";
            }
            else{
                playPlaylist.firstElementChild.style.display = "none";
                playPlaylist.lastElementChild.style.display = "block";
            }
        });
    });
    
    const playNextSong = () =>{
        currentSong++;
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        if(singleSongButton[currentSong]){
            singleSongButton.forEach(songButton => {
                let playIco = songButton.firstElementChild as HTMLElement;
                let pauseIco = songButton.lastElementChild as HTMLElement;
                playIco.style.display = "block";
                pauseIco.style.display = "none";
            });
            changeButtonAppearance(singleSongButton[currentSong]);
        }
        else{
            currentSong--;
        }
    }
    
    const playPreviousSong = () =>{
        currentSong--;
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        if(singleSongButton[currentSong]){
            changeButtonAppearance(singleSongButton[currentSong]);
        }
        else{
            currentSong++;
        }
    }

    playNextBtn.addEventListener("click", () => {
        playNextSong();
    });

    playPreviousBtn.addEventListener("click", () => {
        playPreviousSong();
    });

    //loop and shuffle controls

    let randomBtn = document.getElementById("random");
    let loopBtn = document.getElementById("loop");
    // when current playlist, change  buttons classlist

    loopBtn?.addEventListener("click", () => {
        loopBtn?.classList.toggle("on");
        audio.loop = playerState.isLooping;
        playerState.isLooping = !playerState.isLooping;
    });

    randomBtn?.addEventListener("click", () => {
        randomBtn?.classList.toggle("on");
        playerState.isShuffling = !playerState.isShuffling;
    });

    audio.addEventListener("ended", () => {
        if(playerState.isShuffling){
            let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
            singleSongButton.forEach(songButton => {
                let playIco = songButton.firstElementChild as HTMLElement;
                let pauseIco = songButton.lastElementChild as HTMLElement;
                playIco.style.display = "block";
                pauseIco.style.display = "none";
            });
            currentSong = Math.random() * playlistsData[openedPlaylistID].songs.length;
            changeButtonAppearance(singleSongButton[currentSong]);
        }
        else{
            playNextSong();
        }
    })

    audio.addEventListener("play", () => {
        console.log("play");
        playPlaylist.firstElementChild.style.display = "none";
        playPlaylist.lastElementChild.style.display = "block";
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        singleSongButton[currentSong].firstElementChild.style.display = "none";
        singleSongButton[currentSong].lastElementChild.style.display = "block";
    });

    audio.addEventListener("pause", () => {
        console.log("pause");
        playPlaylist.firstElementChild.style.display = "block";
        playPlaylist.lastElementChild.style.display = "none";
        let singleSongButton = document.querySelectorAll("#singleSongButton") as NodeListOf<HTMLButtonElement>;
        singleSongButton[currentSong].firstElementChild.style.display = "block";
        singleSongButton[currentSong].lastElementChild.style.display = "none";
    });
</script>
<style>
    #cover{
        width: 15rem;
        height: 15rem;
        transition: cubic-bezier(0.075, 0.82, 0.165, 1) 1s;
    }
    #playPlaylist:hover > #cover{
        filter: brightness(0.5);
        scale: 1.1;
    }
    #playPlaylist:hover > button{
        opacity: 1;
        animation: buttonApperar 1s cubic-bezier(0, .5, .5, 1) forwards;
    }
    #playPlaylist{
        overflow: hidden;
        border-radius: 0.6rem;
        display: flex;
        align-items: center;
        position: relative;
        box-shadow: 0 0 1.5rem 0.5rem rgba(0, 0, 0, 0.5);
    }
    #playPlaylist + div{
        display: flex;
        justify-content: end;
        flex-direction: column;
    }
    #playPlaylist svg{
        width: 9rem;
        height: 9rem;
        z-index: 1;
    }
    #playPlaylist button{
        border: none;
        background: none;
        color: white;
        padding: 0;
        position: absolute;
        cursor: pointer;
        opacity: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    @keyframes buttonApperar {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
    #playlistMain{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }
    #playlistMain > div{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4rem;
        margin-top: 2rem;
    }
    #playlistMain div p{
        margin: 0;
    }
    #backButton{
        border: none;
        background-color: white;
        color: white;
        cursor: pointer;
        position: absolute;
        width: 48px;
        height: 48px;
        padding: 0.5rem;
        margin-left: 2rem;
        border-radius: 100%;
    }
    #playlistTop{
        display: flex;
        flex-direction: row;
        gap: 2rem;
        max-width: 60rem;
    }
    #playlistTop > div > h1{
        font-size: 3.5rem;
    }
    #playlistTitle{
        margin-top: 3rem;
    }
    tr :hover{
        background-color: white;
    }
    th{
        text-align: left;
        font-size: 1.5rem;
    }
    #songsTable{
        max-width: 60rem;
        border-collapse: collapse;
    }
    #playlistInfo{
        display: flex;
        flex-direction: row;
        gap: 3rem;
        font-size: 1.5rem;
    }
    @media screen and (max-width: 920px) {
        #playlistTop{
            width: 90vw;
            flex-direction: column;
            align-items: center;
        }
        #playlistTitle{
            text-align: center;
            margin-top: 0;
        }
        #cover{
            width: 13rem;
            height: 13rem;
        }
        #playlistTop > div{
            height: auto;
        }
        #playlistTop > div > h1{
            font-size: 2rem;
        }
        #playlistInfo{
            font-size: 1rem;
        }
        #backButton{
            position: relative;
            margin-top: 2rem;
        }
    }
</style>