<!DOCTYPE html>
<body>
    <div id="playlistMain" style="display: none;">
        <button id="backButton" title="Go back">
            <svg stroke="white" viewBox="0 0 512 512" height="32px" width="32px"><path fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="M328 112L184 256l144 144"></path></svg>
        </button>
        <div>
            <div id="playlistTop">
                <div id="playPlaylist">
                    <img id="cover" src="">
                    <button>
                        <svg viewBox="0 0 15 15" height="32px" width="32px"><path d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill=url(#gradient)></path></svg>
                        <svg viewBox="0 0 15 15" height="32px" width="32px"><path d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z" fill=url(#gradient)></path></svg>
                    </button>
                </div>
                <div>
                    <h1 id="playlistTitle"></h1>
                    <div id="playlistInfo"><p id="author"></p><p id="playlistLength">Playlist length</p></div>
                </div>
            </div>
            <table id="songsTable">
                <thead>
                    <th></th>
                    <th style="width: 4vw;"></th>
                    <th style="width: 3vw;">#</th>
                    <th style="width: 25vw;">Title</th>
                    <th style="width: 25vw;">Artist</th>
                    <th class="length" style="width: 5vw;"><p>Length</p><svg style="display: none"><path d="M17 3.34a10 10 0 1 1 -14.995 8.984l-.005 -.324l.005 -.324a10 10 0 0 1 14.995 -8.336zm-5 2.66a1 1 0 0 0 -.993 .883l-.007 .117v5l.009 .131a1 1 0 0 0 .197 .477l.087 .1l3 3l.094 .082a1 1 0 0 0 1.226 0l.094 -.083l.083 -.094a1 1 0 0 0 0 -1.226l-.083 -.094l-2.707 -2.708v-4.585l-.007 -.117a1 1 0 0 0 -.993 -.883z" stroke-width="0" fill="currentColor"></path></svg></th>
                </thead>
                <tbody id="songs">
                    <svg width="0" height="0">
                        <defs>
                            <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" style="stop-color:rgb(255, 0, 0); stop-opacity:1" />
                                <stop offset="100%" style="stop-color:rgb(0, 153, 255); stop-opacity:1" />
                            </linearGradient>
                        </defs>
                    </svg>
                </tbody>
            </table>
        </div>
    </div>
</body>
</html>
<script>
    import { playerState } from "../player/Player.astro";
    import Vibrant from 'node-vibrant';
    
	import { firebaseConfig } from '../firebaseConfig.astro';
    import { initializeApp } from 'firebase/app';
    import { getStorage, ref as storageRef, getDownloadURL, getMetadata, updateMetadata } from 'firebase/storage';
    import { ref as dbRef, get, getDatabase } from 'firebase/database';

    const firebaseApp = initializeApp(firebaseConfig);
    const storage = getStorage(firebaseApp);
    const db = getDatabase(firebaseApp);
    const playlistData = dbRef(db, 'songData');
    const playlistDataSnapshot = await get(playlistData);
    const playlistsData = playlistDataSnapshot.val();

    let backButton = document.getElementById("backButton") as HTMLElement;
    let playlists = document.querySelectorAll(".song") as NodeListOf<HTMLElement>;
    let cover = document.getElementById("cover") as HTMLImageElement;
    let playlistTitle = document.getElementById("playlistTitle") as HTMLElement;
    let playlistAuthor = document.getElementById("author") as HTMLElement;
    let titlePlayer = document.getElementById("title") as HTMLElement;
    let artistPlayer = document.getElementById("artist") as HTMLElement;
    let playlistLength = document.getElementById("playlistLength") as HTMLElement;
    let songsContainer = document.getElementById("songs") as HTMLElement;
    let playlistMain = document.getElementById("playlistMain") as HTMLElement;
    let main = document.getElementById("main") as HTMLElement;
    let playPlaylist = document.getElementById("playPlaylist")?.lastElementChild as HTMLElement;
    let audio = document.getElementById("audio") as HTMLAudioElement;
    let playNextBtn = document.getElementById("playNext") as HTMLElement;
    let playPreviousBtn = document.getElementById("playPrevious") as HTMLElement;
    let playBtn = document.querySelectorAll(".playButton");
    
    const setAudioSource = async (source: string) => {
        playerState.audioSource = source;
        const songRef = storageRef(storage, 'songs/' + source);
        const songURL = await getDownloadURL(songRef);
        audio.src = songURL;
        if(openedPlaylistID == playerState.currentPlaylist){
            playPlaylist.firstElementChild.style.display = "none";
            playPlaylist.lastElementChild.style.display = "block";
        }
        audio.play();
        let songs = songsContainer.querySelectorAll("tr") as NodeListOf<HTMLElement>;
        songs.forEach(element => {
            let icon = element.children[1]?.firstElementChild?.firstElementChild?.lastElementChild as HTMLElement;
            element.classList.remove("playing");
            icon.style.fill = "white";
        });
        if(openedPlaylistID == playerState.currentPlaylist){
            songsContainer.children[currentSong].classList.add("playing");
            let icon = songsContainer.children[currentSong].children[1]?.firstElementChild?.firstElementChild?.lastElementChild as HTMLElement;
            icon.style.fill = "url(#gradient)";
        }
    }

    playPlaylist.lastElementChild.style.display = "none";

    let openedPlaylistID = 0;
    let currentSong = NaN;
    
    backButton?.addEventListener("click", () => {
        playlistMain.style.display = "none";
        main.style.display = "flex";
        let songs = document.querySelectorAll(".song");
        songs.forEach(song => {
            song.parentElement.classList.remove("active");
        });
        if(playerState.currentPlaylist){
            songs[playerState.currentPlaylist].parentElement.classList.add("active");
        }
        playlists.forEach((playlist, i) => {
            if(i != playerState.currentPlaylist){
                playBtn[i].firstElementChild.style.display = "block";
                playBtn[i].lastElementChild.style.display = "none";
            }
            else{
                let singleSongButton = document.querySelectorAll(".singleSongButton") as NodeListOf<HTMLButtonElement>;
                if(audio.paused){
                    playBtn[i].firstElementChild.style.display = "block";
                    playBtn[i].lastElementChild.style.display = "none";
                    singleSongButton[currentSong].firstElementChild.style.display = "block";
                    singleSongButton[currentSong].lastElementChild.style.display = "none";
                }
                else{
                    playBtn[i].firstElementChild.style.display = "none";
                    playBtn[i].lastElementChild.style.display = "block";
                    singleSongButton[currentSong].firstElementChild.style.display = "none";
                    singleSongButton[currentSong].lastElementChild.style.display = "block";
                }
            }
        });
    });

    function formatDuration(durationInSeconds: number) {
        const minutes = Math.floor(durationInSeconds / 60);
        const seconds = Math.floor(durationInSeconds % 60);
        return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }
    
    async function updatePlaylistInfo() {
        // let lastTime = Date.now();
        let playlistLengthNumber = 0;
        const coverRef = storageRef(storage, 'covers/' + playlistsData[openedPlaylistID].img);
        const coverUrl = await getDownloadURL(coverRef);
        if(currentSong != playerState.currentSong){
            currentSong = playerState.currentSong;
        }
        cover.src = coverUrl;

        playlistTitle.textContent = playlistsData[openedPlaylistID].title;
        playlistAuthor.textContent = playlistsData[openedPlaylistID].author;
        var songs = songsContainer.querySelectorAll("tr") as NodeListOf<HTMLElement>;
        songs.forEach((song) => {
            song.remove();
        });

        let audioDuration;
        const metadataPromises = playlistsData[openedPlaylistID].songs.map(async (song: any) => {
            const songRef = storageRef(storage, 'songs/' + song.source);
            return getMetadata(songRef).then((metadata) => {
                return metadata.customMetadata?.duration || '';
            }).catch((error) => {
                return '';
            });
        });

        async function generateGradient() {
            try {
                const palette = await Vibrant.from(coverUrl).getPalette();
                const dominantColor = palette.Vibrant.getHex();
                const gradient = `linear-gradient(180deg, ${dominantColor} 0%, #13151a 40%, #13151a 100%)`;
                document.documentElement.style.setProperty('--gradient', gradient);
            } catch (error) {
                console.error('Error:', error);
            }
        }
        generateGradient();

        const allMetadata = await Promise.all(metadataPromises);

        for (const [i, song] of playlistsData[openedPlaylistID].songs.entries()) {
            let songElement = document.createElement("tr");
            songElement.style.height = "3rem";
            audioDuration = parseFloat(allMetadata[i]);
            songElement.innerHTML += `
                <td></td>
                <td style="display: flex; height: inherit; padding-right: 1rem;">
                    <button class="singleSongButton" data-id='${i}' data-openedPlaylistID='${openedPlaylistID}' style="padding: 0; border: none; background: none; color: white; cursor: pointer;">
                        <svg viewBox="0 0 16 16" width="32px" height="32px">
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill="white"></path>
                        </svg>
                        <svg viewBox="0 0 16 16" width="32px" height="32px">
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M6.04995 2.74998C6.04995 2.44623 5.80371 2.19998 5.49995 2.19998C5.19619 2.19998 4.94995 2.44623 4.94995 2.74998V12.25C4.94995 12.5537 5.19619 12.8 5.49995 12.8C5.80371 12.8 6.04995 12.5537 6.04995 12.25V2.74998ZM10.05 2.74998C10.05 2.44623 9.80371 2.19998 9.49995 2.19998C9.19619 2.19998 8.94995 2.44623 8.94995 2.74998V12.25C8.94995 12.5537 9.19619 12.8 9.49995 12.8C9.80371 12.8 10.05 12.5537 10.05 12.25V2.74998Z" fill=url(#gradient)></path>
                        </svg>
                    </button>
                </td>
                <td style="padding-right: 1rem;">${i + 1}</td>
                <td style="padding-right: 1rem;">${song.title}</td>
                <td style="padding-right: 1rem;">${song.artist}</td>
                <td>${formatDuration(audioDuration)}</td>`;
            if(i == currentSong && openedPlaylistID == playerState.currentPlaylist){
                songElement.classList.add("playing");
                let icon = songElement.children[1]?.firstElementChild?.firstElementChild?.firstElementChild as HTMLElement;
                icon.style.fill = "url(#gradient)";
            }
            //maybe change it to realtime database later?

            // // Update metadata properties
            // const songRef = storageRef(storage, 'songs/' + song.source);
            // const songURL = await getDownloadURL(songRef);
            // audioTemp = new Audio(songURL)
            // await new Promise(resolve => audioTemp.onloadedmetadata = resolve);
            //
            // const newMetadata = {
            //     cacheControl: 'public, max-age=31536000',
            //     contentType: 'audio/mpeg',
            //     customMetadata: {
            //         'duration': audioTemp.duration.toString()
            //     }
            // };

            // updateMetadata(songRef, newMetadata)
            //     .then((metadata) => {
            //     })
            //     .catch((error) => {
            //     });

            songsContainer.appendChild(songElement);
            playlistLengthNumber += audioDuration;
            
            let singleSongButton = document.querySelectorAll(".singleSongButton")[i] as HTMLButtonElement;
            let playIco = singleSongButton.firstElementChild as HTMLElement;
            let pauseIco = singleSongButton.lastElementChild as HTMLElement;
            if(i != currentSong || openedPlaylistID != playerState.currentPlaylist || audio.paused){
                playIco.style.display = "block";
                pauseIco.style.display = "none";
            }
            else{
                playIco.style.display = "none";
                pauseIco.style.display = "block";
            }
            if(singleSongButton.getAttribute("listener")){
                return;
            }

            const singleSongButtonUpdate = () =>{
                if(currentSong != i || playerState.currentPlaylist != openedPlaylistID)
                {
                    currentSong = i;
                    playerState.currentSong = i;
                    playerState.currentPlaylist = openedPlaylistID;
                    let singleSongButtons = document.querySelectorAll(".singleSongButton") as NodeListOf<HTMLButtonElement>;
                    singleSongButtons.forEach(button => {
                        let playIco = button.firstElementChild as HTMLElement;
                        let pauseIco = button.lastElementChild as HTMLElement;
                        playIco.style.display = "block";
                        pauseIco.style.display = "none";
                    });
                    setAudioSource(song.source);
                    titlePlayer.textContent = playlistsData[playerState.currentPlaylist].songs[i].title;
                    artistPlayer.textContent = playlistsData[playerState.currentPlaylist].songs[i].artist;
                    playIco.style.display = "none";
                    pauseIco.style.display = "block";
                }
                else{
                    if(audio.paused)
                    {
                        changeButtonAppearance(playPlaylist);
                        playIco.style.display = "none";
                        pauseIco.style.display = "block";
                    }
                    else {
                        changeButtonAppearance(playPlaylist);
                        playIco.style.display = "block";
                        pauseIco.style.display = "none";
                    }
                }
            }
            songElement.addEventListener("click", () => {
                songElement.parentElement.querySelectorAll("tr").forEach(song => {
                    song.classList.remove("selected");
                });
                songElement.classList.add("selected");
            });
            songElement.addEventListener("dblclick", () => {
                singleSongButtonUpdate();
            });
            singleSongButton.addEventListener("click", () => {
                singleSongButtonUpdate();
            }); 
        };
        playlistLength.textContent = "Playlist length: " + formatDuration(playlistLengthNumber);
        // console.log(Date.now() - lastTime + " ms");
    }

    const changeButtonAppearance = (playSongBtn: Element, check = false) => {
        let playIco = playSongBtn.firstElementChild as HTMLElement;
        let pauseIco = playSongBtn.lastElementChild as HTMLElement;
        if(playlistsData[playerState.currentPlaylist].songs[currentSong]){
            if(playlistsData[playerState.currentPlaylist].songs[currentSong].source != playerState.audioSource && !check)
            {
                setAudioSource(playlistsData[playerState.currentPlaylist].songs[currentSong].source);
                playIco.style.display = "none";
                pauseIco.style.display = "block";
                titlePlayer.textContent = playlistsData[playerState.currentPlaylist].songs[currentSong].title;
                artistPlayer.textContent = playlistsData[playerState.currentPlaylist].songs[currentSong].artist;
                return;
            }
        }
        if(audio.paused){
            if (!check){
                audio.play();
            }
            playIco.style.display = "none";
            pauseIco.style.display = "block";
        }
        else {
            if (!check){
                audio.pause();
            }
            playIco.style.display = "block";
            pauseIco.style.display = "none";
        }
    }

    const changeAllAppearances = () =>{
        let singleSongButton = document.querySelectorAll(".singleSongButton") as NodeListOf<HTMLButtonElement>;
        if(isNaN(currentSong)){
            currentSong = 0;
            playerState.currentSong = 0;
        }
        if(openedPlaylistID == playerState.currentPlaylist){
            changeButtonAppearance(singleSongButton[currentSong]);
        }
        else if(openedPlaylistID != playerState.currentPlaylist) {
            currentSong = 0;
            playerState.currentSong = 0;
            setAudioSource(playlistsData[openedPlaylistID].songs[currentSong].source);
            playerState.currentPlaylist = openedPlaylistID;
            changeButtonAppearance(singleSongButton[currentSong], false);
            singleSongButton[currentSong].lastElementChild.style.display = "block";
            singleSongButton[currentSong].firstElementChild.style.display = "none";
        }
        titlePlayer.textContent = playlistsData[playerState.currentPlaylist].songs[currentSong].title;
        artistPlayer.textContent = playlistsData[playerState.currentPlaylist].songs[currentSong].artist;
        if(audio.paused){
            playPlaylist.firstElementChild.style.display = "block";
            playPlaylist.lastElementChild.style.display = "none";
        }
        else {
            playPlaylist.firstElementChild.style.display = "none";
            playPlaylist.lastElementChild.style.display = "block";
        }
    }

    playPlaylist.addEventListener("click", () =>{
        changeAllAppearances();
    });

    playlists.forEach((playlist, index) => {
        playlist.addEventListener("click", () => {
            playlistMain.style.display = "block";
            main.style.display = "none";
            openedPlaylistID = index;
            playerState.openedPlaylist = openedPlaylistID;
            //window.location.href = "/playlist/" + openedPlaylistID;
            updatePlaylistInfo();
            if(openedPlaylistID != playerState.currentPlaylist || audio.paused){
                playPlaylist.firstElementChild.style.display = "block";
                playPlaylist.lastElementChild.style.display = "none";
            }
            else{
                playPlaylist.firstElementChild.style.display = "none";
                playPlaylist.lastElementChild.style.display = "block";
            }
        });
    });
    
    const changeSong = () =>{
        let singleSongButton = document.querySelectorAll(".singleSongButton") as NodeListOf<HTMLButtonElement>;
        if(openedPlaylistID == playerState.currentPlaylist && singleSongButton[currentSong]){
            singleSongButton.forEach(songButton => {
                let playIco = songButton.firstElementChild as HTMLElement;
                let pauseIco = songButton.lastElementChild as HTMLElement;
                playIco.style.display = "block";
                pauseIco.style.display = "none";
            });
            singleSongButton[playerState.currentSong].firstElementChild.style.display = "none";
            singleSongButton[playerState.currentSong].lastElementChild.style.display = "block";
        }
        setAudioSource(playlistsData[playerState.currentPlaylist].songs[currentSong].source);
        titlePlayer.textContent = playlistsData[playerState.currentPlaylist].songs[currentSong].title;
        artistPlayer.textContent = playlistsData[playerState.currentPlaylist].songs[currentSong].artist;
    }

    let tempArray = [] as any;
    let previousSongs = [] as any;

    const playNextSong = () => {
        if(isNaN(currentSong)){
            currentSong = playerState.currentSong;
        }
        if(playerState.isShuffling){
            previousSongs.push(playlistsData[playerState.currentPlaylist].songs[currentSong]);
            if(tempArray.length <= 1){
                tempArray = playlistsData[playerState.currentPlaylist].songs.filter((song :any) => song.source !== playlistsData[playerState.currentPlaylist].songs[currentSong].source);
                tempArray.sort(() => Math.random() - 0.5);
            }

            let nextSong = tempArray[0];
            titlePlayer.textContent = nextSong.title;
            artistPlayer.textContent = nextSong.artist;
            
            currentSong = playlistsData[playerState.currentPlaylist].songs.findIndex((song :any) => song.source === nextSong.source);
            playerState.currentSong = currentSong;
            changeSong();
            
            tempArray.shift();
        }
        else if(playlistsData[playerState.currentPlaylist].songs.length - 1 > playerState.currentSong){
            previousSongs.push(playlistsData[playerState.currentPlaylist].songs[currentSong]);
            currentSong++;
            playerState.currentSong = currentSong;
            changeSong();
        }
    }

    const playPreviousSong = () => {
        if(isNaN(currentSong)){
            currentSong = playerState.currentSong;
        }
        if(audio.currentTime > 3){
            audio.currentTime = 0;
            return;
        }
        if(previousSongs.length > 0){
            let previousSong = previousSongs.pop();
            currentSong = playlistsData[playerState.currentPlaylist].songs.findIndex((song :any) => song.source === previousSong.source);
            playerState.currentSong = currentSong;
            changeSong();
        }
        else if(playerState.currentSong > 0){
            currentSong--;
            playerState.currentSong = currentSong;
            changeSong();
        }
    }

    audio.addEventListener("ended", () => {
        playNextSong();
    })

    playNextBtn.addEventListener("click", () => {
        playNextSong();
    });

    playPreviousBtn.addEventListener("click", () => {
        playPreviousSong();
    });
</script>
<style is:global>
    #songs > tr{
        transition: cubic-bezier(0.075, 0.82, 0.165, 1) 0.5s;
        -webkit-user-select: none;
        user-select: none;
    }
    #songs > tr:hover{
        background-color: rgba(53, 53, 53, 0.25);
    }
    #songs > tr > td:first-child{
        padding-left: 0.5rem;
        border-radius: 0.3rem 0 0 0.3rem;
    }
    #songs > tr > td:last-child{
        border-radius: 0 0.3rem 0.3rem 0;
        text-align: right;
        padding-right: 0.5rem; 
    }
    .playing > td{
        background-image: linear-gradient(to bottom right,rgb(255, 0, 64),rgb(0, 132, 255));
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }
    .selected{
        background-color: rgba(122, 122, 122, 0.25) !important;
    }
</style>
<style>
    #cover{
        width: 15rem;
        height: 15rem;
        transition: cubic-bezier(0.075, 0.82, 0.165, 1) 1s;
    }
    #playPlaylist:hover > #cover{
        filter: brightness(0.6);
        transform: scale(1.1);
    }
    #playPlaylist:hover > button{
        opacity: 1;
        animation: buttonApperar 1s cubic-bezier(0, .5, .5, 1) forwards;
    }
    #playPlaylist{
        overflow: hidden;
        border-radius: 0.6rem;
        display: flex;
        align-items: center;
        position: relative;
        box-shadow: 0 0 1.5rem 0.5rem rgba(0, 0, 0, 0.5);
    }
    #playPlaylist + div{
        display: flex;
        justify-content: end;
        flex-direction: column;
    }
    #playPlaylist svg{
        width: 9rem;
        height: 9rem;
        z-index: 1;
    }
    #playPlaylist button{
        border: none;
        background: none;
        color: white;
        padding: 0;
        position: absolute;
        cursor: pointer;
        opacity: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    @keyframes buttonApperar {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
    #playlistMain{
        min-height: 100vh;
    }
    #playlistMain::after{
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100vw;
        height: calc(100vh - 2rem);
        background-image: linear-gradient(rgba(0,0,0,.6) 0, #13151a 100%), url("noise.png");
        opacity: 0.1;
        z-index: -1;
    }
    #playlistMain::before{
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100vw;
        height: calc(100vh - 2rem);
        background-image: var(--gradient);
        opacity: 0.6;
        z-index: -2;
    }
    #playlistMain > div{
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4rem;
        padding-top: 2rem;
    }
    #playlistMain div p{
        margin: 0;
    }
    #backButton{
        border: none;
        background-color: rgba(0, 0, 0, 0.6);
        cursor: pointer;
        position: absolute;
        width: 48px;
        height: 48px;
        padding: 0.5rem;
        margin-left: 2rem;
        margin-top: 2rem;
        border-radius: 100%;
    }
    #playlistTop{
        display: flex;
        flex-direction: row;
        gap: 2rem;
        max-width: 60rem;
    }
    #playlistTop > div > h1{
        font-size: 3.5rem;
    }
    #playlistTitle{
        margin-top: 3rem;
    }
    tr:hover{
        background-color: white;
    }
    th{
        text-align: left;
        font-size: 1.7rem;
        border-bottom: 1px solid rgb(112, 112, 112);
    }
    #songsTable{
        max-width: 60rem;
        border-collapse: collapse;
    }
    #songsTable > thead{
        height: 3rem;
    }
    #songsTable > tbody{
        font-weight: 500;
    }
    #playlistInfo{
        display: flex;
        flex-direction: row;
        gap: 3rem;
        font-size: 1.5rem;
    }
    @media screen and (max-width: 920px) {
        #playlistTop{
            width: 90vw;
            flex-direction: column;
            align-items: center;
        }
        #playlistTitle{
            text-align: center;
            margin-top: 0;
        }
        #playlistTop > div{
            height: auto;
        }
        #playlistTop > div > h1{
            font-size: 2rem;
        }
        #playlistInfo{
            font-size: 1rem;
        }
        #backButton{
            position: relative;
        }
        .length{
            text-align: -webkit-right;
            text-indent: 10px;
        }
        .length > p{
            display: none !important;
        }
        .length > svg{
            display: block !important;
            height: 22px;
            width: 30px;
        }
    }
</style>