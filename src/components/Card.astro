<script>
	import { getStorage, ref as storageRef, getDownloadURL } from "firebase/storage";
	import { initializeApp } from 'firebase/app';
	import { ref as dbRef, get, getDatabase } from "firebase/database";
	import { firebaseConfig } from '../firebaseConfig.astro';

	const firebaseApp = initializeApp(firebaseConfig);
    const db = getDatabase(firebaseApp);
	const storage = getStorage(firebaseApp);
	const playlistsRef = dbRef(db, 'songData');
    const playlistDataSnapshot = await get(playlistsRef);
    const playlistsData = playlistDataSnapshot.val();

	const playlistsList = document.getElementById('playlistsList');

	const createPlaylists = async() => {
		playlistsData.forEach(playlist => {
			playlistsList.innerHTML += `<div class="link-card">
			<div id="song">
    			<div id="imgPlay">
					<img src="" width="1000px" height="1000px" />
					<button id="playButton" class="no-animation">
						<!-- <svg viewBox="0 0 384 512" height="32px" width="32px" fill="white"><path d="M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z"></path></svg> -->
						<!-- <svg viewBox="0 0 320 512" height="32px" width="32px" fill="white"><path d="M48 64C21.5 64 0 85.5 0 112V400c0 26.5 21.5 48 48 48H80c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zm192 0c-26.5 0-48 21.5-48 48V400c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H240z"></path></svg> -->
						<svg viewBox="0 0 448 512" height="32px" width="32px" fill="white"><path d="M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"></path></svg>
						<svg viewBox="0 0 448 512" height="32px" width="32px" fill="white"><path d="M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z"></path></svg>
					</button>
    				</div>
    				<div id="info">
						<h2></h2>
						<p></p>
    				</div>
				</div>
			</div>`;
		});
	}
	//style is not applied to the elements created by the function above, so we need to call it before we select the elements
	await createPlaylists();

	const playButtons = document.querySelectorAll('#playButton');
	const linkCards = document.getElementsByClassName('link-card');

	playButtons.forEach(button => {
		button.firstElementChild.style.display = 'block';
		button.lastElementChild.style.display = 'none';
	});
	
	Array.from(linkCards).forEach((card: Element) => {
		const button = card.querySelector('#playButton');
		card.addEventListener('mouseover', () => {
			button?.classList.remove('no-animation');
		});
	});

	let imgs = document.querySelectorAll('#imgPlay img');
	let infosH2 = document.querySelectorAll('#info h2') as NodeListOf<HTMLHeadingElement>;
	let infosP = document.querySelectorAll('#info p') as NodeListOf<HTMLParagraphElement>;

	try {
		const snapshot = await get(playlistsRef);
		const data = snapshot.val();
		if (data) {
			Object.keys(data).forEach((key) => {
				const coversRef = storageRef(storage, 'covers/' + data[key].img);
				(async () => {
					const url = await getDownloadURL(coversRef);
					imgs[key].src = url;
					infosH2[key].innerHTML = data[key].title;
					infosP[key].innerHTML = data[key].author;
				})();
			});
		} else {
			console.log('No data available');
		}
	} catch (error) {
		console.error('Error fetching data:', error);
	}
</script>
<style>
	#imgPlay{
		position: relative;
		width: 100%;
		height: 100%;
	}
	img{
		width: 100%;
		height: 100%;
	}
	#info{
		text-align: center;
	}
	.link-card {
		position: relative;
		display: flex;
		flex-direction: column;
		border-radius: 8px;
		max-width: 28ch;
		width: 100%;
		transition: ease-in-out 0.3s;
		background-image: linear-gradient(
			to bottom right,
			rgba(71, 0, 0, 0.2),
			rgba(17, 135, 214, 0.1)
			);
			z-index: 0;
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	.link-card::before{
		position: absolute;
  		content: '';
  		top: 0;
  		right: 0;
  		bottom: 0;
  		left: 0;
		border-radius: 8px;
  		background-image: linear-gradient(
			to bottom right,
			rgba(131, 29, 29, 0.2),
			rgba(99, 175, 226, 0.2)
		);
  		z-index: -1;
  		transition: opacity 0.5s linear;
  		opacity: 0;
	}
	.link-card:hover{
		scale: 1.05;
	}
	.link-card:is(:hover, .active)::before{
		opacity: 1;
	}
	#song {
		padding: 1.5rem;
		border-radius: 8px;
		color: white;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		border: none;
		font-family: inherit;
		cursor: pointer;
		gap: 1vh;
	}
	#playButton {
		position: absolute;
		visibility: hidden;
		font-size: 1.5rem;
		bottom: calc(0.5vh + 0.5vw);
		right: calc(0.5vh + 0.5vw);
		color: white;
		font-family: inherit;
		cursor: pointer;
		border: none;
		background-color: inherit;
		padding: 0;
		overflow: hidden;
		z-index: 10;
	}
	@keyframes playButtonAnimation {
		0%{
			visibility: hidden;
			transform: translateY(30%);
			opacity: 0;
		}
		100%{
			transform: translateY(0%);
			opacity: 1;
			visibility: visible;
		}
	}
	.no-animation{
		animation: none !important;
		visibility: hidden !important;
	}
	.link-card:not(.active):hover #playButton {
    	visibility: visible;
    	animation: playButtonAnimation 0.35s ease-in-out forwards;
	}
	.link-card img{
		transition: 0.5s ease-in-out;
	}
	.link-card:not(.active):hover img{
		box-shadow: 0rem 0rem 1rem rgba(0, 0, 0, 0.5);
	}
	.link-card:not(:hover, .active) #playButton {
		visibility: visible;
    	animation: playButtonAnimationReverse 0.35s ease-in-out forwards;
	}

	@keyframes playButtonAnimationReverse {
	    0% {
	        transform: translateY(0%);
	        opacity: 1;
	    }
	    100% {
	        transform: translateY(30%);
	        opacity: 0;
			visibility: hidden;
	    }
	}
	.link-card:is(.active) #playButton {
		visibility: visible;
	}
	svg {
		clip-path: circle(50% at 50% 50%);
		background-color: rgb(146,75,236);
		color: white;
		padding: 1rem;
		height: max-content;
		width: max-content;
	}
	div{
		display: flex;
		flex-direction: column;
	}
	img{
		border-radius: 0.5rem;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}
	.link-card:hover h2 {
		color: var(--accent-light);
	}
	.active{
		color: var(--accent-light) !important;
		scale: 1.05;
	}
	.active img{
		box-shadow: 0rem 0rem 1rem rgba(0, 0, 0, 0.5);
	}
</style>