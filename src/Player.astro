---
import { BsVolumeDown, BsVolumeMute, BsVolumeUp } from 'react-icons/bs';
import { RxLoop, RxShuffle, RxPlay, RxTrackNext, RxTrackPrevious, RxPause } from 'react-icons/rx';

export let playerState = {
    isPlaying: false,
    isLooping: false,
    isShuffling: false,
    audioSource: "",
    currentPlaylist: 0
};
---

<div id="audioPlayer">
    <div id="songInfo">
        <h1><a id="title">Title</a></h1>
        <h2><a id="artist">Artist</a></h2>
    </div>
    <div id="mainControls">
        <div id="songControls">
            <button id="random"><RxShuffle /></button>
            <button id="back"><RxTrackPrevious /></button>
            <button id="play"><RxPlay /><RxPause /></button>
            <button id="back"><RxTrackNext /></button>
            <button id="loop"><RxLoop /></button>
        </div>
        <div id="audioNavigation">
            <label id="current-time" class="time">0:00</label>
            <input type="range" id="seek-slider" min="0" max="0" value="0" disabled>
            <label id="duration" class="time">0:00</label>
        </div>
    </div>
    <div id="volumeControl">
        <span id="volume">50</span>
        <button id="mute"><BsVolumeDown /><BsVolumeUp /><BsVolumeMute /></button>
        <input type="range" id="volume-slider" min="0" max="100" value="50">
    </div>
    <audio id="audio" src="" preload="metadata">
</div>

<script>
    import { playerState } from './Player.astro';
    let cardPlayBtns = document.querySelectorAll("#playButton");
    let playBtn = document.getElementById("play") as HTMLButtonElement;
    let loopBtn = document.getElementById("loop");
    let randomBtn = document.getElementById("random");
    let currentTime = document.getElementById("current-time");
    let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
    let durationTime = document.getElementById("duration");
    let audio = document.getElementById("audio") as HTMLAudioElement;
    let muteBtn = document.getElementById("mute");
    let volume = document.getElementById("volume");
    let currentVolume = document.getElementById("volume-slider") as HTMLInputElement;
    let title = document.getElementById("title");
    let artist = document.getElementById("artist");
  
    seekSlider.disabled = true;
    if (playBtn) playBtn.disabled = true;
    
    //player

    const changePlayerPlayBtn = (isOn = false) =>{
        if(playBtn instanceof HTMLElement){
            const firstChild = playBtn.firstChild as HTMLElement;
            const lastChild = playBtn.lastChild as HTMLElement;
            if (isOn) {
                firstChild.style.display = "block";
                lastChild.style.display = "none";
            } else {
                firstChild.style.display = "none";
                lastChild.style.display = "block";
            }
        }
    }

    //change song <-- it will recieve the song source link and play it

    const changeSong = (sourceLink: string) => {
        console.log("Changing song");
        if (playBtn instanceof HTMLElement) {
            if (sourceLink == null || sourceLink == "" || sourceLink == undefined) {
                console.log("No audio source found");
                seekSlider.setAttribute("disabled", "true");
                playBtn.setAttribute("disabled", "true");
                audio.setAttribute("src", "null");
                changePlayerPlayBtn(true);
                calTime;
            } else if (sourceLink !== audio.src) {
                seekSlider.removeAttribute("disabled");
                playBtn.removeAttribute("disabled");
                audio.setAttribute("src", sourceLink);
                changePlayerPlayBtn();
                console.log("Audio source changed");
                changeApperance();
                playerState.isPlaying = !playerState.isPlaying;
            }
        }
    }

    const changeApperance = () =>{
        if (audio instanceof HTMLAudioElement) {
            if (audio.paused) {
                audio.play();
            } else {
                audio.pause();
            }
            playerState.isPlaying = !playerState.isPlaying;
        }
    }

    audio.addEventListener("play", () => {
        if (audio instanceof HTMLAudioElement) {
            console.log("kocham jaja")
            changePlayerPlayBtn();
            playerState.isPlaying = !playerState.isPlaying;
        }
    });

    audio.addEventListener("pause", () => {
        if (audio instanceof HTMLAudioElement) {
            console.log("kocham jaja")
            changePlayerPlayBtn(false);
            playerState.isPlaying = !playerState.isPlaying;
        }
    });

    playBtn.addEventListener("click", () => {
        changeApperance();
    });

    //displaying the duration of the song

    const displayDuration = (timeElapsed: number, duration = 0) => {
        if (currentTime) {
            currentTime.innerHTML = calculateTime(timeElapsed);
        }
        if (durationTime && duration !== 0) {
            durationTime.innerHTML = calculateTime(duration);
        }
        seekSlider.value = "0";
    };
  
    const calculateTime = (secs: number) => {
        const minutes = Math.floor(secs / 60);
        const seconds = Math.floor(secs % 60);
        if (seconds < 10) {
            return `${minutes}:0${seconds}`;
        } else if (seconds >= 10) {
            return `${minutes}:${seconds}`;
        } else {
            return `0:00`;
        }
    };

    //volume controls

    let turned = true;
    let lastVolume = 50;

    currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
    if(audio instanceof HTMLAudioElement){
        audio.volume = Number(currentVolume.value) / 200;
    }
    const changeVolume = () =>{
        if (audio instanceof HTMLAudioElement) {
            audio.volume = Number(currentVolume.value) / 200;
        }
    }
   
    // muteBtn?.addEventListener("click", () => {
    //     if(turned){
    //         lastVolume = currentVolume.value;
    //         currentVolume.value = "0";
    //             const firstChild = muteBtn.firstChild as HTMLElement;
    //             const secondChild = muteBtn.children[1] as HTMLElement;
    //             const lastChild = muteBtn.lastChild as HTMLElement;
    //             firstChild.style.display = "none";
    //             secondChild.style.display = "none";
    //             lastChild.style.display = "block";
    //     } else {
    //         currentVolume.value = lastVolume;
    //         if (muteBtn && currentVolume.value != "0") {
    //             const firstChild = muteBtn.firstChild as HTMLElement;
    //             const secondChild = muteBtn.children[1] as HTMLElement;
    //             const lastChild = muteBtn.lastChild as HTMLElement;
    //             if(lastVolume > 75){
    //                 firstChild.style.display = "none";
    //                 secondChild.style.display = "block";
    //                 lastChild.style.display = "none";
    //             } else {
    //                 firstChild.style.display = "block";
    //                 secondChild.style.display = "none";
    //                 lastChild.style.display = "none";
    //             }
    //         }
    //     }
    //     currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
    //     if(volume) {
    //         volume.innerHTML = currentVolume.value.toString();
    //         changeVolume();
    //     }
    //     turned = !turned;
    // });

    currentVolume.addEventListener("input", () => {
        audio.volume = Number(currentVolume.value) / 200;
        const [firstChild, secondChild, lastChild] = muteBtn.children as HTMLElement[];
        if (Number(currentVolume.value) > 75) {
            firstChild.style.display = "none";
            secondChild.style.display = "block";
            lastChild.style.display = "none";
        } else if (Number(currentVolume.value) > 0) {
            firstChild.style.display = "block";
            secondChild.style.display = "none";
            lastChild.style.display = "none";
        } else {
            firstChild.style.display = "none";
            secondChild.style.display = "none";
            lastChild.style.display = "block";
        }
        currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
        volume.innerHTML = currentVolume.value.toString();
    });

    currentVolume?.addEventListener("change", () => {
        lastVolume = Number(currentVolume.value);
        turned != turned;
        changeVolume();
    });
    
    audio?.addEventListener("loadedmetadata", () => {
        displayDuration(audio.currentTime, audio.duration);
    });

    //timeline controls

    let tempValue = 0;
    seekSlider?.addEventListener("input", () => {
        if (audio && currentTime) {
            tempValue = Number(seekSlider.value);
            seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
            currentTime.innerHTML = calculateTime(tempValue);
        }
    });
    
    seekSlider?.addEventListener("change", () => {
        if (audio instanceof HTMLAudioElement) {
            audio.currentTime = audio.duration * (Number(seekSlider.value) / Number(seekSlider.max));
            seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
            tempValue = 0;
        }
    });

    const calTime = setInterval(() => {
        if(audio instanceof HTMLAudioElement){
            if (durationTime && tempValue == 0) {
                displayDuration(audio.currentTime);
                seekSlider.value = audio.currentTime.toString();
                seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
                if(isNaN(Number(seekSlider.max))){
                    seekSlider.max = "0";
                }
                else{
                    seekSlider.max = Math.floor(audio.duration).toString();
                }
            }
        }
    }, 1000);

    //loop and shuffle controls

    loopBtn?.addEventListener("click", () => {
        loopBtn?.classList.toggle("on")
        audio.loop = playerState.isLooping;
        playerState.isLooping = !playerState.isLooping;
    });

    randomBtn?.addEventListener("click", () => {
        randomBtn?.classList.toggle("on");
        playerState.isShuffling = !playerState.isShuffling;
    });

    //card play buttons

    const removeClasses = () => {
        cardPlayBtns.forEach((button) => {
            if (button instanceof HTMLElement) {
                const parentElement = button.parentElement?.parentElement?.parentElement;
                if (parentElement) {
                    parentElement.classList.remove("active");
                }
            }
        });
    }

    const cardButtonsCheck = (button: Element) => {
        if(playerState.currentPlaylist != button.parentElement.parentElement?.dataset.source){
            playerState.currentPlaylist = button.parentElement.parentElement?.dataset.source;
            changeSong(button.dataset.source);
            button.firstChild.style.display = 'none';
            button.lastChild.style.display = 'block';
        } else {
            if(audio.paused){
                console.log("Audio is playing");
                button.firstChild.style.display = 'none';
                button.lastChild.style.display = 'block';
                changeApperance();
            } else {
                console.log("Audio is paused");
                cardPlayBtns.forEach((button) => {
                    button.firstChild.style.display = 'block';
                    button.lastChild.style.display = 'none';
                });
                changeApperance();
            }
            playerState.isPlaying = !playerState.isPlaying;
        }
    }

    cardPlayBtns.forEach((button) => {
        if(button.dataset.source != null){
            button.addEventListener("click", (event) => {
                removeClasses();
                button.parentElement.parentElement.parentElement.classList.remove("active");
                cardButtonsCheck(button);
                event.stopPropagation();
            });
        }
    });
</script>
<style>
    :root{
        --volume-before-width: 50%;
    }
    input[type="range"] {
        position: relative;
        -webkit-appearance: none;
        border-radius: 1rem;
    }
    input[type="range"]:disabled {
        background-color: #2a2b2c;
    }
    input[type="range"]::-webkit-slider-runnable-track {
        width: 100%;
        height: 5px;
        cursor: pointer;
    }
    input[type="range"]::-webkit-slider-thumb {
        visibility: hidden;
        position: relative;
        -webkit-appearance: none;
        box-sizing: content-box;
        border: 1px solid #2a2b2c;
        height: 16px;
        width: 16px;
        border-radius: 50%;
        background-color: #fff;
        cursor: pointer;
        margin: -7px 0 0 0;
    }
    input[type="range"]:hover::-webkit-slider-thumb {
        visibility: visible;
    }
    input[type="range"]::before {
        position: absolute;
        content: "";
        left: 0;
        height: 5px;
        background-color: var(--accent);
        border-radius: 1rem;
        cursor: pointer;
    }
    input[type="range"]:active::-webkit-slider-thumb {
        transform: scale(1.1);
    }
    #seek-slider::before{
        width: var(--seek-before-width);
    }
    #volume-slider{
        width: 100%;
        max-width: 8rem;
    }
    #volume-slider::before{
        width: var(--volume-before-width);
    }
    #seek-slider{
        width: 50vw;
    }
    #mute :nth-child(2){
        display: none;
    }
    #mute :last-child{
        display: none;
    }
    #mute > svg{
        text-align: left;
    }
    #play :last-child{
        display: none;
    }
    body{
        color: white;
    }
    button{
        background: none;
        border: none;
        color: white;
        padding: 0;
        margin: 0;
        font-size: 2rem;
		cursor: pointer;
    }
    #audioPlayer{
        position: fixed;
        bottom: 0;
        width: 100%;
        background: #000;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 5%;
        z-index: 100;
        height: 12vh;
        min-height: 7.5rem;
    }
    #songControls{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 3vw;
    }
    #mainControls{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin: auto;
        width: 50%;
    }
    #play{
        clip-path: circle(50% at center);
        background-color: rgb(255, 255, 255);
        color: rgb(0, 0, 0);
        padding: 0.8rem;
        transition: ease-in-out 0.2s;
    }
    #play:hover{
        background-color: rgb(201, 201, 201);
    }
    #random::after, #loop::after{
        content: "";
    }
    #random.on, #loop.on{
        color: rgb(146,75,236);
        height: 2rem;
    }
    #random.on::after, #loop.on::after{
        display: block;
        position: relative;
        content: "";
        width: 5px;
        height: 5px;
        justify-self: center;
        align-self: center;
        border-radius: 1rem;
        margin: auto;
        top: 5px;
        background-color: rgb(146,75,236);
    }
    #audioNavigation{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        width: 100%;
    }
    #volumeControl{
        width: calc(20% - 2vw);
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: right;
        margin-right: 2vw;
    }
    #songInfo{
        width: calc(20% - 2vw);
        margin-left: 2vw;
    }
    #songInfo a:hover{
        text-decoration: underline;
        cursor: pointer;
    }
    #duration, #current-time{
        width: 3vw;
    }
    #current-time{
        text-align: right;
    }
    svg{
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>