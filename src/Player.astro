---
import { fade } from "astro:transitions";

import { FaPlay } from 'react-icons/fa';
import { BsFillPauseFill } from 'react-icons/bs';
import { BsFillVolumeDownFill, BsFillVolumeMuteFill } from 'react-icons/bs';
import { FaBackward, FaForward } from 'react-icons/fa6';
import { FaStepForward, FaStepBackward } from 'react-icons/fa';
---

<div id="audioPlayer">
    <div id="songInfo">
        <h1>Title</h1>
        <h2>Artist</h2>
    </div>
    <div id="mainControls">
        <div id="audioNavigation">
            <button id="back"><FaBackward /></button>
            <button id="play"><FaPlay /><BsFillPauseFill /></button>
            <button id="back"><FaForward /></button>
        </div>
        <div>
            <span id="current-time" class="time">0:00</span>
            <input type="range" id="seek-slider" max="100" value="0">
            <span id="duration" class="time">0:00</span>
        </div>
    </div>
    <div id="volumeControl">
        <span id="volume">100</span>
        <button id="mute"><BsFillVolumeDownFill /></button>
        <input type="range" id="volume-slider" max="100" value="100">
    </div>
    <audio src="" preload="metadata">
</div>

<script>
    let songBtns = document.querySelectorAll("#song");
    let playBtn = document.getElementById("play");
    let cardPlayBtn = document.getElementById("playButton");
    let audio = document.getElementsByTagName("audio")[0];
    let timeline = document.getElementById("duration");
    let currentTime = document.getElementById("current-time");
    let volume = document.getElementById("volume");
    let currentVolume = document.getElementById("volume-slider") as HTMLInputElement;
    let muteBtn = document.getElementById("mute");
    let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
    let volumeSlider = document.getElementById("volume-slider") as HTMLInputElement;

    const changeSong = (sourceLink:any) => {
        if (audio) {
            audio.src = sourceLink;
            audio.load();
            audio.play();
            changeState();
        }
    };

    const displayDuration = (duration: number, timeElapsed: number) =>{
        if (currentTime) {
            currentTime.innerHTML = calculateTime(timeElapsed);
        }
        if (timeline) {
            timeline.innerHTML = calculateTime(duration);
        }
    }

    const calculateTime = (secs: number) =>{
        const minutes = Math.floor(secs / 60);
        const seconds = Math.floor(secs % 60);
        if (seconds < 10) {
            return `${minutes}:0${seconds}`;
        }
        else{
            return `${minutes}:${seconds}`;
        }
    }

    songBtns.forEach((button) => {
        if (button instanceof HTMLElement) {
            button.addEventListener("click", () => changeSong(button.dataset.source));
        }
    });

    if(audio.src == null || audio.src == ""){
        timeline?.setAttribute('aria-disabled', 'true');
    }

    const changeState = () => {
        if(audio.paused){
            audio.play(); 
            if(playBtn) {
                const firstChild = playBtn.firstChild as HTMLElement;
                const lastChild = playBtn.lastChild as HTMLElement;
                firstChild.style.display = "none";
                lastChild.style.display = "block";
            }
        }else{
            audio.pause(); 
            if(playBtn) {
                const firstChild = playBtn.firstChild as HTMLElement;
                const lastChild = playBtn.lastChild as HTMLElement;
                firstChild.style.display = "block";
                lastChild.style.display = "none";
            }
        }
    }

    muteBtn?.addEventListener("click", () => {
        let turned = false;
        let lastVolume;
        if(lastVolume == "" || lastVolume == null){
            lastVolume = currentVolume.value;
        }
        turned ? currentVolume.value = "lastVolume" : currentVolume.value = "0";
        if (volume) {
            volume.innerHTML = currentVolume.value.toString();
        }
        turned = !turned;
    });
    currentVolume.addEventListener("change", () => {
        if (volume) {
            volume.innerHTML = currentVolume.value.toString();
        }
    });
    audio.addEventListener("loadedmetadata", () => {
        if (timeline) {
            displayDuration(audio.duration, audio.currentTime);
        }
    });
    playBtn?.addEventListener("click", () => {
        changeState()
    });
    cardPlayBtn?.addEventListener("click", () => {
        changeState()
    });
    seekSlider?.addEventListener("change", () => {
        if (audio) {
            audio.currentTime = audio.duration * (seekSlider.value / 100);
        }
    });
    volumeSlider?.addEventListener("change", () => {
        if (audio) {
            audio.volume = volumeSlider.value / 100;
        }
    });
    audio.addEventListener("timeupdate", () => {
        if (timeline) {
            displayDuration(audio.duration, audio.currentTime);
            seekSlider.value = (audio.currentTime / audio.duration) * 100;
        }
    });
</script>

<style>
    #play :last-child{
        display: none;
    }
    audio {
        width: 100%;
        position: fixed;
        bottom: 0;
        background: #fff;
    }
    body{
        color: white;
    }
    button{
        background: none;
        border: none;
        color: white;
        padding: 0;
        margin: 0;
        font-size: 2rem;
        margin: 1rem;
		cursor: pointer;
    }
    #audioPlayer{
        position: fixed;
        bottom: 0;
        width: 100%;
        background: #000;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 10%;
    }
    #mainControls{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin: auto;
    }
    #seek-slider {
        width: 100%;
        height: 4px;
        border-radius: 5px;
        cursor: pointer;
        background: #333333;
    }
    #seek-slider::-webkit-slider-thumb {
        visibility: hidden;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
    }
    #seek-slider::-webkit-slider-runnable-track:hover{
        color-scheme: green;
    }
    #seek-slider:hover::-webkit-slider-thumb {
        visibility: visible;
    }
    #volumeControl{
        width: 30%;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: right;
    }
    #songInfo{
        width: 30%;
    }
</style>