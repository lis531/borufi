---
import { BsVolumeDown, BsVolumeMute, BsVolumeUp } from 'react-icons/bs';
import { RxLoop, RxShuffle, RxPlay, RxTrackNext, RxTrackPrevious, RxPause } from 'react-icons/rx';
---

<div id="audioPlayer">
    <div id="songInfo">
        <h1><a>Title</a></h1>
        <h2><a>Artist</a></h2>
    </div>
    <div id="mainControls">
        <div id="songControls">
            <button id="random"><RxShuffle /></button>
            <button id="back"><RxTrackPrevious /></button>
            <button id="play"><RxPlay /><RxPause /></button>
            <button id="back"><RxTrackNext /></button>
            <button id="loop"><RxLoop /></button>
        </div>
        <div id="audioNavigation">
            <label id="current-time" class="time">0:00</label>
            <input type="range" id="seek-slider" min="0" max="0" value="0" disabled>
            <label id="duration" class="time">0:00</label>
        </div>
    </div>
    <div id="volumeControl">
        <span id="volume">50</span>
        <button id="mute"><BsVolumeDown /><BsVolumeUp /><BsVolumeMute /></button>
        <input type="range" id="volume-slider" min="0" max="100" value="50">
    </div>
    <audio src="" preload="metadata">
</div>

<script>
    let cardPlayBtns = document.querySelectorAll("#playButton");
    let playBtn = document.getElementById("play");
    let loopBtn = document.getElementById("loop");
    let randomBtn = document.getElementById("random");
    let currentTime = document.getElementById("current-time");
    let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
    let durationTime = document.getElementById("duration");
    let audio = document.getElementsByTagName("audio")[0];
    let muteBtn = document.getElementById("mute");
    let volume = document.getElementById("volume");
    let currentVolume = document.getElementById("volume-slider") as HTMLInputElement;
    let songPlayBtns = document.querySelectorAll("#playSong");
    console.log(songPlayBtns);

    seekSlider.setAttribute("disabled", "true");
    playBtn.setAttribute("disabled", "true");

    const changeSong = (sourceLink:any) => {
        if(sourceLink == null || sourceLink == "" || sourceLink == undefined){
            console.log("No audio source found");
            seekSlider.setAttribute("disabled", "true");
            playBtn?.setAttribute("disabled", "true");
            audio.src = "null";
            changeState(true);
            calTime;
        } else if (sourceLink != audio.src){
            seekSlider.removeAttribute("disabled");
            playBtn?.removeAttribute("disabled");
            audio.src = sourceLink;
            audio.load();
            changeState();
        }
    };

    // const playNextSong = () => {
    //     let nextSong = document.querySelector(".active").nextElementSibling;
    //     if (nextSong) {
    //         changeSong(nextSong.dataset.source);
    //         removeClasses();
    //         nextSong.parentElement.classList.add("active");
    //     }
    // }

    const displayDuration = (timeElapsed: number, duration = null) =>{
        if (currentTime) {
            currentTime.innerHTML = calculateTime(timeElapsed);
        }
        if (durationTime && duration !== null) {
            durationTime.innerHTML = calculateTime(duration);
        }
        seekSlider.value = 0;
    }

    const calculateTime = (secs: number) =>{
        const minutes = Math.floor(secs / 60);
        const seconds = Math.floor(secs % 60);
        if (seconds < 10) {
            return `${minutes}:0${seconds}`;
        }
        else if (seconds >= 10){
            return `${minutes}:${seconds}`;
        }
        else{
            return `0:00`;
        }
    }

    const changeState = (isNull: boolean = false) => {
        if(playBtn){
            const firstChild = playBtn.firstChild as HTMLElement;
            const lastChild = playBtn.lastChild as HTMLElement;
            if(audio.paused && !isNull){
                audio.play();
                firstChild.style.display = "none";
                lastChild.style.display = "block";
            }else{
                audio.pause();
                firstChild.style.display = "block";
                lastChild.style.display = "none";
                currentTime.innerHTML = "0:00";
                durationTime.innerHTML = "0:00";
            }
        }
    }
    currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
    audio.volume = currentVolume.value / 200;
    const changeVolume = () =>{
        if (audio) {
            audio.volume = currentVolume.value / 200;
        }
    }

    let turned = true;
    let lastVolume = 0;
    muteBtn?.addEventListener("click", () => {
        if(turned){
            lastVolume = currentVolume.value;
            currentVolume.value = "0";
            if (muteBtn) {
                const firstChild = muteBtn.firstChild as HTMLElement | null;
                const secondChild = muteBtn.children[1] as HTMLElement | null;
                const lastChild = muteBtn.lastChild as HTMLElement | null;
                firstChild.style.display = "none";
                secondChild.style.display = "none";
                lastChild.style.display = "block";
            }
            currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
        } else {
            currentVolume.value = lastVolume.toString();
            if (muteBtn && currentVolume.value != "0") {
                const firstChild = muteBtn.firstChild as HTMLElement | null;
                const secondChild = muteBtn.children[1] as HTMLElement | null;
                const lastChild = muteBtn.lastChild as HTMLElement | null;
                if(lastVolume > 75){
                    firstChild.style.display = "none";
                    secondChild.style.display = "block";
                    lastChild.style.display = "none";
                } else {
                    firstChild.style.display = "block";
                    secondChild.style.display = "none";
                    lastChild.style.display = "none";
                }
            }
            currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
        }
        if(volume) {
            volume.innerHTML = currentVolume.value.toString();
            changeVolume();
        }
        turned = !turned;
    });

    currentVolume.addEventListener("input", () => {
        if (volume) {
            audio.volume = currentVolume.value / 200;
            const firstChild = muteBtn.firstChild as HTMLElement | null;
            const secondChild = muteBtn.children[1] as HTMLElement | null;
            const lastChild = muteBtn.lastChild as HTMLElement | null;
            if(currentVolume.value > 75){
                if (muteBtn) {
                    firstChild.style.display = "none";
                    secondChild.style.display = "block";
                    lastChild.style.display = "none";
                }
            } else if(currentVolume.value > 0){
                if (muteBtn) {
                    firstChild.style.display = "block";
                    secondChild.style.display = "none";
                    lastChild.style.display = "none";
                }
            } else {
                if (muteBtn) {
                    firstChild.style.display = "none";
                    secondChild.style.display = "none";
                    lastChild.style.display = "block";
                }
            }
            currentVolume.style.setProperty('--volume-before-width', `${(Number(currentVolume.value) / Number(currentVolume.max)) * 100}%`);
            volume.innerHTML = currentVolume.value.toString();
        }
    });

    audio.addEventListener("loadedmetadata", () => {
        if (durationTime) {
            displayDuration(audio.currentTime, audio.duration);
        }
    });

    playBtn?.addEventListener("click", () => {
        changeState();
        cardPlayBtns.forEach(button => {
            if (button instanceof HTMLElement) {
                if(audio.paused){
                    button.firstChild.style.display = 'block';
                    button.lastChild.style.display = 'none';
                } else {
                    button.firstChild.style.display = 'none';
                    button.lastChild.style.display = 'block';
                    checkBtns();
                }
            }
        });
    });

    let tempValue = 0;
    seekSlider?.addEventListener("input", () => {
        if (audio) {
            tempValue = seekSlider.value;
            seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
            currentTime.innerHTML = calculateTime(tempValue);
        }
    });
    
    seekSlider?.addEventListener("change", () => {
        if (audio) {
            audio.currentTime = audio.duration * (seekSlider.value / seekSlider.max);
            seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
            tempValue = 0;
        }
    });

    currentVolume?.addEventListener("change", () => {
        lastVolume = currentVolume.value;
        turned != turned;
        changeVolume();
    });

    const calTime = setInterval(() => {
        if (durationTime && tempValue == 0) {
            displayDuration(audio.currentTime);
            seekSlider.value = audio.currentTime;
            seekSlider.style.setProperty('--seek-before-width', `${(Number(seekSlider.value) / Number(seekSlider.max)) * 100}%`);
            if(isNaN(seekSlider.max)){
                seekSlider.max = "0";
            }
            else{
                seekSlider.max = Math.floor(audio.duration).toString();
            }
        }
        else if(audio.ended && randomTurned){
            playNextSong();
        }
    }, 1000);

    let loopTurned = false;
    loopBtn?.addEventListener("click", () => {
        if (loopTurned) {
            audio.loop = false;
            loopBtn?.classList.remove("on");
        } else if (!loopTurned){
            audio.loop = true;
            loopBtn?.classList.add("on");
        }
        loopTurned = !loopTurned;
    });

    let randomTurned = false;
    randomBtn?.addEventListener("click", () => {
        if (randomTurned) {
            randomBtn?.classList.remove("on");
        } else if (!randomTurned){
            randomBtn?.classList.add("on");
        }
        randomTurned = !randomTurned;
    });

    const removeClasses = () => {
        cardPlayBtns.forEach((button) => {
            if (button instanceof HTMLElement) {
                button.parentElement.parentElement.parentElement.classList.remove("active");
            }
        });
    }
    
    const checkBtns = () =>{
        cardPlayBtns.forEach((button) => {
            if (button instanceof HTMLElement) {
                if(button.dataset.source != audio.src.split("/").pop()){
                    button.firstChild.style.display = 'block';
                    button.lastChild.style.display = 'none';
                } else {
                    button.firstChild.style.display = 'none';
                    button.lastChild.style.display = 'block';
                }
            }
        });
    }

    songPlayBtns.forEach((button) => {
        if (button instanceof HTMLElement) {
            button.addEventListener("click", () => {
                console.log(button.dataset.source);
                removeClasses();
                button.parentElement.parentElement.parentElement.classList.add("active");
                if(button.dataset.source != audio.src.split("/").pop()){
                    changeSong(button.dataset.source)
                    button.firstChild.style.display = 'none';
                    button.lastChild.style.display = 'block';
                    audio.play();
                } else {
                    if(audio.paused){
                        button.firstChild.style.display = 'none';
                        button.lastChild.style.display = 'block';
                        changeState();
                        audio.play();
                    } else {
                        button.firstChild.style.display = 'block';
                        button.lastChild.style.display = 'none';
                        changeState();
                        audio.pause();
                    }
                }
            });
            if(button.dataset.source != audio.src){
                console.log(button.dataset.source);

                button.firstChild.style.display = 'block';
                button.lastChild.style.display = 'none';
            }
        }
    });

    cardPlayBtns.forEach((button) => {
        if (button instanceof HTMLElement) {
            button.addEventListener("click", (event) => {
                removeClasses();
                button.parentElement.parentElement.parentElement.classList.add("active");
                if(button.dataset.source != audio.src.split("/").pop()){
                    changeSong(button.dataset.source)
                    button.firstChild.style.display = 'none';
				    button.lastChild.style.display = 'block';
                    audio.play();
                    checkBtns();
                } else {
                    if(audio.paused){
                        button.firstChild.style.display = 'none';
                        button.lastChild.style.display = 'block';
                        changeState();
                        audio.play();
                    } else {
                        button.firstChild.style.display = 'block';
                        button.lastChild.style.display = 'none';
                        changeState();
                        audio.pause();
                    }
                }
                event.stopPropagation();
            });
            if(button.dataset.source != audio.src){
                button.firstChild.style.display = 'block';
				button.lastChild.style.display = 'none';
            }
        }
    });
</script>

<style>
    :root{
        --volume-before-width: 50%;
    }
    input[type="range"] {
        position: relative;
        -webkit-appearance: none;
        border-radius: 1rem;
    }
    input[type="range"]:disabled {
        background-color: #2a2b2c;
    }
    input[type="range"]::-webkit-slider-runnable-track {
        width: 100%;
        height: 5px;
        cursor: pointer;
    }
    input[type="range"]::-webkit-slider-thumb {
        visibility: hidden;
        position: relative;
        -webkit-appearance: none;
        box-sizing: content-box;
        border: 1px solid #2a2b2c;
        height: 16px;
        width: 16px;
        border-radius: 50%;
        background-color: #fff;
        cursor: pointer;
        margin: -7px 0 0 0;
    }
    input[type="range"]:hover::-webkit-slider-thumb {
        visibility: visible;
    }
    input[type="range"]::before {
        position: absolute;
        content: "";
        left: 0;
        height: 5px;
        background-color: var(--accent);
        border-radius: 1rem;
        cursor: pointer;
    }
    input[type="range"]:active::-webkit-slider-thumb {
        transform: scale(1.1);
    }
    #seek-slider::before{
        width: var(--seek-before-width);
    }
    #volume-slider{
        width: 100%;
        max-width: 8rem;
    }
    #volume-slider::before{
        width: var(--volume-before-width);
    }
    #seek-slider{
        width: 50vw;
    }
    #mute :nth-child(2){
        display: none;
    }
    #mute :last-child{
        display: none;
    }
    #mute > svg{
        text-align: left;
    }
    #play :last-child{
        display: none;
    }
    body{
        color: white;
    }
    button{
        background: none;
        border: none;
        color: white;
        padding: 0;
        margin: 0;
        font-size: 2rem;
		cursor: pointer;
    }
    #audioPlayer{
        position: fixed;
        bottom: 0;
        width: 100%;
        background: #000;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 5%;
        z-index: 100;
        height: 12vh;
        min-height: 7.5rem;
    }
    #songControls{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 3vw;
    }
    #mainControls{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin: auto;
        width: 50%;
    }
    #play{
        clip-path: circle(50% at center);
        background-color: rgb(255, 255, 255);
        color: rgb(0, 0, 0);
        padding: 0.8rem;
        transition: ease-in-out 0.2s;
    }
    #play:hover{
        background-color: rgb(201, 201, 201);
    }
    #random::after, #loop::after{
        content: "";
    }
    #random.on, #loop.on{
        color: rgb(146,75,236);
        height: 2rem;
    }
    #random.on::after, #loop.on::after{
        display: block;
        position: relative;
        content: "";
        width: 5px;
        height: 5px;
        justify-self: center;
        align-self: center;
        border-radius: 1rem;
        margin: auto;
        top: 5px;
        background-color: rgb(146,75,236);
    }
    #audioNavigation{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        width: 100%;
    }
    #volumeControl{
        width: calc(20% - 2vw);
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: right;
        margin-right: 2vw;
    }
    #songInfo{
        width: calc(20% - 2vw);
        margin-left: 2vw;
    }
    #songInfo a:hover{
        text-decoration: underline;
        cursor: pointer;
    }
    #duration, #current-time{
        width: 3vw;
    }
    #current-time{
        text-align: right;
    }
    svg{
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>