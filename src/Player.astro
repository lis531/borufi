---
import { fade } from "astro:transitions";
import { BsFillVolumeDownFill, BsFillVolumeMuteFill } from 'react-icons/bs';
import { RxLoop, RxShuffle, RxPlay, RxTrackNext, RxTrackPrevious, RxPause } from 'react-icons/rx';
---

<div id="audioPlayer">
    <div id="songInfo">
        <h1><a>Title</a></h1>
        <h2><a>Artist</a></h2>
    </div>
    <div id="mainControls">
        <div id="songControls">
            <button id="random"><RxShuffle /></button>
            <button id="back"><RxTrackPrevious /></button>
            <button id="play"><RxPlay /><RxPause /></button>
            <button id="back"><RxTrackNext /></button>
            <button id="loop"><RxLoop /></button>
        </div>
        <div id="audioNavigation">
            <span id="current-time" class="time">0:00</span>
            <input type="range" id="seek-slider" min="0" max="0" value="0" step="1">
            <span id="duration" class="time">0:00</span>
        </div>
    </div>
    <div id="volumeControl">
        <span id="volume">50</span>
        <button id="mute"><BsFillVolumeDownFill /><BsFillVolumeMuteFill /></button>
        <input type="range" id="volume-slider" min="0" max="100" value="50">
    </div>
    <audio src="" preload="metadata">
</div>

<script>
    let songBtns = document.querySelectorAll("#song");
    let playBtn = document.getElementById("play");
    let loopBtn = document.getElementById("loop");
    let cardPlayBtn = document.getElementById("playButton");
    let currentTime = document.getElementById("current-time");
    let seekSlider = document.getElementById("seek-slider") as HTMLInputElement;
    let durationTime = document.getElementById("duration");
    let audio = document.getElementsByTagName("audio")[0];
    let muteBtn = document.getElementById("mute");
    let volume = document.getElementById("volume");
    let currentVolume = document.getElementById("volume-slider") as HTMLInputElement;

    const changeSong = (sourceLink:any) => {
        if(sourceLink == null || sourceLink == "" || sourceLink == undefined){
            console.log("No audio source found");
            seekSlider.setAttribute("disabled", "true");
            playBtn.setAttribute("disabled", "true");
            changeState();
            audio.src = "null";
        }
        else{
            seekSlider.removeAttribute("disabled");
            playBtn.removeAttribute("disabled");
            audio.src = sourceLink;
            audio.load();
            changeState();
        }
    };

    const displayDuration = (duration: number, timeElapsed: number) =>{
        if (currentTime) {
            currentTime.innerHTML = calculateTime(timeElapsed);
        }
        if (durationTime) {
            durationTime.innerHTML = calculateTime(duration);
        }
        seekSlider.value = 0;
    }

    const calculateTime = (secs: number) =>{
        const minutes = Math.floor(secs / 60);
        const seconds = Math.floor(secs % 60);
        if (seconds < 10) {
            return `${minutes}:0${seconds}`;
        }
        else if (seconds >= 10){
            return `${minutes}:${seconds}`;
        }
        else{
            return `0:00`;
        }
    }

    const changeState = () => {
        if(playBtn){
            const firstChild = playBtn.firstChild as HTMLElement;
            const lastChild = playBtn.lastChild as HTMLElement;
            if(audio.paused && audio.src != "null"){
                audio.play();
                firstChild.style.display = "none";
                lastChild.style.display = "block";
            }else{
                audio.pause();
                firstChild.style.display = "block";
                lastChild.style.display = "none";
            }
        }
    }
    
    const changeVolume = () =>{
        if (audio) {
            audio.volume = currentVolume.value / 100;
        }
    }



    let turned = true;
    let lastVolume = 0;
    muteBtn?.addEventListener("click", () => {
        console.log(lastVolume, currentVolume.value, turned);
        if(turned){
            lastVolume = currentVolume.value;
            currentVolume.value = "0";
        } else {
            currentVolume.value = lastVolume.toString();
        }
        if(volume) {
            volume.innerHTML = currentVolume.value.toString();
            changeVolume();
        }
        turned = !turned;
    });

    currentVolume.addEventListener("change", () => {
        if (volume) {
            volume.innerHTML = currentVolume.value.toString();
        }
    });

    audio.addEventListener("loadedmetadata", () => {
        if (durationTime) {
            displayDuration(audio.duration, audio.currentTime);
        }
    });

    playBtn?.addEventListener("click", () => {
        changeState()
    });

    cardPlayBtn?.addEventListener("click", () => {
        changeState()
    });

    seekSlider?.addEventListener("change", () => {
        if (audio) {
            audio.currentTime = audio.duration * (seekSlider.value / 100);
        }
    });

    currentVolume?.addEventListener("change", () => {
        lastVolume = currentVolume.value;
        turned != turned;
        changeVolume();
    });

    audio.addEventListener("timeupdate", () => {
        if (durationTime) {
            displayDuration(audio.duration, audio.currentTime);
            seekSlider.value = (audio.currentTime / seekSlider.max) * 100;
            if(isNaN(seekSlider.max)){
                seekSlider.max = "0";
            }
            else{
                seekSlider.max = audio.duration.toString();
            }
        }
    });

    loopBtn?.addEventListener("click", () => {
        let turned = false;
        if (turned) {
            audio.loop = false;
            loopBtn.style.content = "";
        } else {
            audio.loop = true;
            loopBtn.style.content = ".";
        }
        turned = !turned;
    });

    songBtns.forEach((button) => {
        if (button instanceof HTMLElement) {
            button.addEventListener("click", () => changeSong(button.dataset.source));
        }
    });
</script>

<style>
    #volume-slider{
        width: 100%;
        height: 5px;
        border-radius: 5px;
        outline: none;
        cursor: pointer;
        -webkit-appearance: none;
    }
    #volume-slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 1rem;
        height: 1rem;
        border-radius: 50%; 
        background: #fff;
        cursor: pointer;
        visibility: hidden;
    }
    #volume-slider:hover::-webkit-slider-thumb {
        visibility: visible;
    }
    #volume-slider::-webkit-slider{
        background-color: green;
    }
    #mute :last-child{
        display: none;
    }
    #play :last-child{
        display: none;
    }
    body{
        color: white;
    }
    button{
        background: none;
        border: none;
        color: white;
        padding: 0;
        margin: 0;
        font-size: 2rem;
		cursor: pointer;
    }
    #audioPlayer{
        position: fixed;
        bottom: 0;
        width: 100%;
        background: #000;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 8%;
    }
    #songControls{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 3rem;
    }
    #mainControls{
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin: auto;
        width: 50%;
    }
    #play{
        clip-path: circle(50% at center);
        background-color: rgb(255, 255, 255);
        color: rgb(0, 0, 0);
        padding: 0.8rem;
        transition: ease-in-out 0.2s;
    }
    #play:hover{
        background-color: rgb(201, 201, 201);
    }
    #random.active, #loop.active{
        color: rgb(146,75,236);
    }
    #audioNavigation{
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }
    #seek-slider {
        width: max-content;
        height: 4px;
        width: 50vw;
        border-radius: 5px;
        cursor: pointer;
        background: #333333;
    }
    #seek-slider::-webkit-slider-thumb {
        visibility: hidden;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
    }
    #seek-slider::-webkit-slider-runnable-track{
        color-scheme: green;
        border-radius: 50%;
    }
    #seek-slider:hover::-webkit-slider-thumb {
        visibility: visible;
    }
    #volumeControl{
        width: 20%;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: right;
        margin-right: 2rem;
    }
    #songInfo{
        width: 20%;
        margin-left: 2rem;
    }
    #songInfo a:hover{
        text-decoration: underline;
        cursor: pointer;
    }
    #durationTime, #current-time{
        width: 3vw;
    }
    #current-time{
        text-align: right;
    }
    svg{
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>
